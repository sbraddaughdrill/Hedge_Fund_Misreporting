#   regression_equations_comb2[,c("outname_short")] <- paste(regression_equations_comb2[,c("dep_var")],
#                                                            regression_equations_comb2[,c("beg_years")],
#                                                            regression_equations_comb2[,c("end_years")],
#                                                            regression_equations_comb2[,c("note")],
#                                                            sep="_")
#
#   beginning_cols2 <- c("date_index","list_index","dep_index","model_index","outname_short","note","beg_years","end_years","model_type")
#   regression_equations_comb2 <- regression_equations_comb2[,c(beginning_cols2,
#                                                               colnames(regression_equations_comb2[,!(colnames(regression_equations_comb2) %in% beginning_cols2)]))]
#
#   rm(beginning_cols2)
#
#   return(regression_equations_comb2)
# }
#
# regression_read_adjustment <- function(equations_df,equations_col,name_col,read_prefix,read_list,index_list){
#
#   #equations_df <- regression_equations_expand2
#   #equations_col <- "indep_var"
#   #name_col <- "outname_short"
#   #read_prefix <- "XXX"
#   #read_list <- "ios"
#   #index_list <- c("date_index","list_index","dep_index","model_index")
#
#   require(plyr)
#
#   read_index <- 0
#
#   equations_adjusted <- ldply(.data=read_list, .fun = function(x,equations_df,equations_col,name_col,read_prefix){
#
#     #x <- read_list[1]
#
#     read_index <<- read_index + 1
#
#     equations_df[,equations_col] <- gsub(read_prefix,x, equations_df[,equations_col])
#
#     equations_df[,c(name_col)] <- paste(equations_df[,c(name_col)],x,sep="_")
#
#     data_temp <- data.frame(read_index=read_index, equations_df,stringsAsFactors=FALSE)
#
#   }, equations_df=equations_df, equations_col=equations_col,name_col=name_col,read_prefix=read_prefix,
#   .progress = "none", .inform = FALSE, .parallel = FALSE, .paropts = NULL, .id = NA)
#
#   rm(read_index)
#
#   equations_adjusted2 <- equations_adjusted[,c(index_list,
#                                                colnames(equations_adjusted[,!(colnames(equations_adjusted) %in% index_list)]))]
#
#   return(equations_adjusted2)
# }
#
# regression_sim_adjustment <- function(equations_df,equations_col,name_col,sim_prefix,sim_list,index_list){
#
#   #equations_df <- regression_equations_expand2
#   #equations_col <- "indep_var"
#   #name_col <- "outname_short"
#   #sim_prefix <- "YYYpct"
#   #sim_list <- sim_type2
#   #index_list <- c("date_index","list_index","dep_index","model_index")
#
#   require(plyr)
#
#   sim_index <- 0
#
#   equations_adjusted <- ldply(.data=sim_list, .fun = function(x,equations_df,equations_col,name_col,sim_prefix){
#
#     #x <- sim_list[1]
#
#     sim_index <<- sim_index + 1
#
#     equations_df[,equations_col] <- gsub(sim_prefix,x, equations_df[,equations_col])
#
#     equations_df[,c(name_col)] <- paste(equations_df[,c(name_col)],x,sep="_")
#
#     data_temp <- data.frame(sim_index=sim_index, equations_df,stringsAsFactors=FALSE)
#
#   }, equations_df=equations_df, equations_col=equations_col,name_col=name_col,sim_prefix=sim_prefix,
#   .progress = "none", .inform = FALSE, .parallel = FALSE, .paropts = NULL, .id = NA)
#
#   rm(sim_index)
#
#   equations_adjusted2 <- equations_adjusted[,c(index_list,
#                                                colnames(equations_adjusted[,!(colnames(equations_adjusted) %in% index_list)]))]
#
#   return(equations_adjusted2)
# }
#
# regression_correlation <- function(x,data,decimals,read_abrev,sim_abrev,additional_vars){
#
#   require(plyr)
#
#   #x <- regression_equations_final1
#   #x <- regression_equations_final2
#   #data_all <- data_all
#   #decimals <- corr_decimals
#   #read_abrev <- c('ios')
#   #sim_abrev <- c('050pct','900pct')
#   #additional_vars <- c("pflow_lag1","mktadjret_lag1","exret_lag1")
#   #additional_vars <- c("pflow_lag1","pflow_lag2","pflow_lag3","pflow_lag4","mktadjret_lag1","mktadjret_lag2","mktadjret_lag3","mktadjret_lag4","exret_lag1","exret_lag2","exret_lag3","exret_lag4")
#
#
#   regression1_correlation1 <- c(na.omit(as.character(unlist(x[,"indep_var"], use.names=FALSE))))
#   regression1_correlation2 <- paste(regression1_correlation1, sep="", collapse="+")
#   rm(regression1_correlation1)
#
#   regression1_correlation3 <- unique(strsplit(gsub("\\+", "\\1 ", regression1_correlation2), " ")[[1]])
#   rm(regression1_correlation2)
#
#   #regression1_correlation4 <- gsub("XXX","ios",regression1_correlation3,ignore.case = TRUE)
#   regression1_correlation4a <- gsub_expand(myrepl=list(list(pattern=c('XXX'),replacement=read_abrev)),
#                                            regression1_correlation3)
#   regression1_correlation4b <- gsub_expand(myrepl=list(list(pattern=c('YYYpct'),replacement=sim_abrev)),
#                                            regression1_correlation4a)
#   regression1_correlation4 <- unique(regression1_correlation4b)
#   rm(regression1_correlation3,regression1_correlation4a,regression1_correlation4b)
#
#   regression1_correlation5 <- regression1_correlation4[!(regression1_correlation4=="")]
#   rm(regression1_correlation4)
#
#   dep_vars_list <- unique(c(x[,"dep_var"]))
#
#   dep_additional_vars0 <- llply(.data=dep_vars_list,.fun = function(x,dep_additional_vars_temp){
#     #x <- dep_vars_list[1]
#     #dep_additional_vars <- sort(unique(c(dep_vars_list,additional_vars)))
#
#     dep_additional_vars_temp[grep(x, dep_additional_vars_temp, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE)]
#
#   },dep_additional_vars_temp=sort(unique(c(dep_vars_list,additional_vars))), .progress = "none", .inform = FALSE, .parallel = FALSE, .paropts = NULL)
#
#   dep_additional_vars <-unlist(dep_additional_vars0)
#
#   rm(dep_vars_list,dep_additional_vars0)
#
#   control_vars_list <- c(read_abrev,sim_abrev)
#
#   control_vars0 <- llply(.data=control_vars_list,.fun = function(x,dep_additional_vars_temp){
#     #x <- dep_vars[1]
#     #dep_additional_vars <- sort(unique(c(dep_vars,additional_vars)))
#
#     dep_additional_vars_temp[grep(x, dep_additional_vars_temp, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE)]
#
#   },dep_additional_vars_temp=sort(unique(regression1_correlation5)), .progress = "none", .inform = FALSE, .parallel = FALSE, .paropts = NULL)
#
#   control_vars <- c(unlist(control_vars0),regression1_correlation5)
#   control_vars <- unique(control_vars)
#
#   rm(control_vars_list,control_vars0,regression1_correlation5)
#
#   regression1_correlation6a <- c(dep_additional_vars,control_vars)
#   regression1_correlation6b <- regression1_correlation6a[!(regression1_correlation6a %in% c("factor(yr)"))]
#
#   rm(regression1_correlation6a)
#
#   regression1_correlation6c <- unique(regression1_correlation6b)
#   regression1_correlation6c <- regression1_correlation6c[!is.na(regression1_correlation6c)]
#
#   rm(regression1_correlation6b)
#
#   regression1_correlation7 <- corstarsl(data_all[,regression1_correlation6c],round=decimals)
#
#   rm(regression1_correlation6c)
#
#   regression1_correlation8 <- matrix("", ncol=nrow(regression1_correlation7), nrow=nrow(regression1_correlation7),
#                                      dimnames=list(rownames(regression1_correlation7), rownames(regression1_correlation7)))
#
#   regression1_correlation7 <- data.frame(lapply(regression1_correlation7, as.character), stringsAsFactors=FALSE)
#
#   for (i in 1:ncol(regression1_correlation7))
#   {
#
#     temp_col_name <- colnames(regression1_correlation7)[i]
#     regression1_correlation8[,temp_col_name] <- regression1_correlation7[,temp_col_name]
#     rm(temp_col_name)
#   }
#   rm(regression1_correlation7,i)
#
#   diag(regression1_correlation8) <- paste(format(1.0, digits = decimals, nsmall=decimals),"***",sep="")
#
#   regression1_correlation8 <- data.frame(var=row.names(regression1_correlation8),regression1_correlation8, stringsAsFactors=FALSE)
#   row.names(regression1_correlation8) <- seq(nrow(regression1_correlation8))
#
#   return(regression1_correlation8)
# }
#
#
# regression_execute_logit_probit <- function(equations_df,data_all,date_index_var,id,output_dir,family){
#
#   # equations_df <- regression_equations_final1
#   # data_all <- descrip_stats_data_aggregate
#   # date_index_var <- "date_index"
#   # id <- identifier
#   # output_dir <- output_directory_reg_readability
#   # family <- "logit"
#
#   require(plyr)
#
#   invisible(d_ply(.data=equations_df, .variables=date_index_var,
#                   .fun = function(x,data_all,id,output_dir,family){
#
#                     # x <- regression_equations_final1[regression_equations_final1[,"date_index"]==1,]
#                     # x <- regression_equations_final1[regression_equations_final1[,"date_index"]==2,]
#
#                     Start_yr_temp <- as.integer(unique(x["beg_years"]))
#                     End_yr_temp <- as.integer(unique(x["end_years"]))
#
#                     cat("\n","START YEAR:", Start_yr_temp, "END YEAR:", End_yr_temp,"\n")
#
#                     data_temp <- data_all
#
#                     data_temp <- data_temp[(data_temp[,"yr"]>=Start_yr_temp & data_temp[,"yr"]<=End_yr_temp),]
#                     row.names(data_temp) <- seq(nrow(data_temp))
#
#                     d_ply(.data=x, .variables=c("list_index","dep_index","read_index","sim_index"),
#                           .fun = function(y,data_temp.pd,data_temp,id,output_dir,family){
#
#                             # y <- x[(x[,"list_index"]==1 & x[,"dep_index"]==1 & x[,"read_index"]==1 & x[,"sim_index"]==1),]
#
#                             dep_var_temp <- unique(y[,c("dep_var")])
#                             note_temp <- unique(y[,c("note")])
#
#                             model_type_temp <- unique(y[,c("model_type")])
#
#                             out_file_name <- paste("reg_compare",family,unique(y[,c("outname_short")]),sep="_")
#
#                             note_temp_clean1 <- gsub("_", " ", note_temp, perl=TRUE)
#                             note_temp_clean2 <- gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", note_temp_clean1, perl=TRUE)
#
#                             regressions_temp <- dlply(.data=y, .variables="model_index",
#                                                       .fun = function(z,data_temp,model_type_temp,id,family){
#
#                                                         #l <- 1
#                                                         #l <- 2
#                                                         #l <- 5
#                                                         #z <- y[l,]
#
#                                                         model_count <- as.integer(unique(z[,c("model_index")]))
#
#                                                         #cat(model_count, "\n")
#
#                                                         ind_vars_reg0 <- z[,"indep_var"]
#                                                         ind_vars_reg0 <- gsub("XXX","ios",ind_vars_reg0,ignore.case = TRUE)
#                                                         #reg0 <- plm(as.formula(paste(z[,"dep_var"],ind_vars_reg0,sep="~")),data=data_temp.pd,model=model_type_temp)
#                                                         #reg0_rse <- mcl.plm(data_temp, reg0, data_temp[,id], data_temp[,"month"])
#
#                                                         reg0 <- glm(as.formula(paste(z[,"dep_var"],ind_vars_reg0,sep="~")), family = binomial(link = family), data=data_temp)
#                                                         reg0_rse <- coeftest(reg0)
#
#                                                         rm(model_count,ind_vars_reg0)
#
#                                                         return(list(reg0,reg0_rse))
#
#                                                       }, data_temp=data_temp, model_type_temp=model_type_temp, id=id,family=family,
#                                                       .progress = "none", .inform = FALSE, .drop = TRUE, .parallel = FALSE, .paropts = NULL)
#
#                             reg <- sapply(regressions_temp, "[",1)
#                             rse <- sapply(regressions_temp, "[[",2)
#                             se <- llply(.data=rse, .fun = function(w){w[,4]})
#                             pval <- llply(.data=rse, .fun = function(w){w[,4]})
#
#                             cat("\n")
#
#                             htmlreg(l=reg,
#                                     model.names=paste("(",seq(1,nrow(y)),")",sep=""),
#                                     override.se=se,
#                                     override.pval=pval,
#                                     stars=c(0.01, 0.05, 0.1), digits=3,
#                                     caption=paste("Effect Of",note_temp_clean2,"On Hedge Fund Flows – Multivariate",sep=" "),
#                                     file=paste(output_dir,out_file_name,".doc",sep=""))
#
#                             rm(dep_var_temp,note_temp,model_type_temp,out_file_name,note_temp_clean1,note_temp_clean2)
#                             rm(regressions_temp,reg,rse,se,pval)
#
#                           },
#                           data_temp=data_temp,id=id,output_dir=output_dir,family=family,
#                           .progress = "text", .inform = FALSE, .drop = TRUE, .parallel = FALSE, .paropts = NULL)
#
#                     rm(Start_yr_temp,End_yr_temp,data_temp)
#
#                   },
#                   data_all=data_all,id=id,output_dir=output_dir,family=family,
#                   .progress = "text", .inform = FALSE,.print = FALSE, .parallel = FALSE, .paropts = NULL))
#
# }
###############################################################################
cat("SECTION: LIBRARIES", "\n")
###############################################################################
#Load External Packages
external_packages <- c("aod","compare","cwhmisc","data.table","descr","fastmatch","formatR","gdata",
"gtools","Hmisc","installr","knitr","leaps","lmtest","markdown","memisc","mitools",
"pander","pbapply","PerformanceAnalytics","plm","plyr","psych","quantreg","R.oo","R2wd",
"reporttools","reshape2","rms","RSQLite","sandwich","sqldf","stargazer","stringr",
"texreg","taRifx","UsingR","xtable","zoo")
invisible(unlist(sapply(external_packages,load_external_packages, repo_str=repo, simplify=FALSE, USE.NAMES=FALSE)))
installed_packages <- list_installed_packages(external_packages)
rm2(repo,external_packages,installed_packages)
###############################################################################
cat("SECTION: SQLITE DATABASES", "\n")
###############################################################################
#crsp_db <- paste(output_directory,"CRSPMF_Formatted.s3db",sep="")
#mflinks_db <- paste(output_directory,"MFLinks_Formatted.s3db",sep="")
#msd_db <- paste(output_directory,"MDMF_Formatted.s3db",sep="")
#similarity_db <- paste(output_directory,"Similarity_Analysis.s3db",sep="")
#descriptive_stats_db <- paste(output_directory,"Descriptive_stats.s3db",sep="")
#data_fulll_db <- paste(output_directory,"Data_full.s3db",sep="")
###############################################################################
cat("IMPORT DATA", "\n")
###############################################################################
identifier <- "fund_id"
beg_year <- 1994
end_year <- 2011
#descriptive_stats_tables <- ListTables(descriptive_stats_db)
#descriptive_stats_fields <- ListFields(descriptive_stats_db)
corr_decimals <- 3
data_all0 <- read.csv(file=paste(output_directory,"data_all_tone",".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE)
###############################################################################
cat("COMPUTE ADDITIONAL VARIABLES", "\n")
###############################################################################
### Create Quality Score Quantile DVs
descrip_stats_data_quantile_cols <- c("quality_score_trim2_90_Q1","quality_score_trim2_90_Q2","quality_score_trim2_90_Q3","quality_score_trim2_90_Q4")
descrip_stats_data_quantile <-  data.frame(data_all0,
matrix(NA, ncol=length(descrip_stats_data_quantile_cols), nrow=nrow(data_all0), dimnames=list(c(), descrip_stats_data_quantile_cols)), stringsAsFactors=FALSE)
descrip_stats_data_quantile[,"quality_score_trim2_90_Q1"] <- ifelse((descrip_stats_data_quantile[,"quality_score_trim2_90"]>=0 &
descrip_stats_data_quantile[,"quality_score_trim2_90"]<=1),1,0)
descrip_stats_data_quantile[,"quality_score_trim2_90_Q2"] <- ifelse((descrip_stats_data_quantile[,"quality_score_trim2_90"]>=2 &
descrip_stats_data_quantile[,"quality_score_trim2_90"]<=2),1,0)
descrip_stats_data_quantile[,"quality_score_trim2_90_Q3"] <- ifelse((descrip_stats_data_quantile[,"quality_score_trim2_90"]>=3 &
descrip_stats_data_quantile[,"quality_score_trim2_90"]<=3),1,0)
descrip_stats_data_quantile[,"quality_score_trim2_90_Q4"] <- ifelse((descrip_stats_data_quantile[,"quality_score_trim2_90"]>=4 &
descrip_stats_data_quantile[,"quality_score_trim2_90"]<=7),1,0)
#utils::View(descrip_stats_data_quantile[,c(identifier,"yr","quality_score_trim2_90",descrip_stats_data_quantile_cols)])
rm2(data_all0,descrip_stats_data_quantile_cols)
### Create Monthly Level Data
descrip_stats_data_monthly0 <- descrip_stats_data_quantile
descrip_stats_fund_vars_remove <- c("month",
"mktadjret_lag1","mktadjret_lag2","mktadjret_lag3","mktadjret_lag4",
"nflow_lag1","nflow_lag2","nflow_lag3","nflow_lag4",
"pflow_lag1","pflow_lag2","pflow_lag3","pflow_lag4",
"age_m","chgdt",
"mktadjret_lag1_sq","mktadjret_lag2_sq","mktadjret_lag3_sq","mktadjret_lag4_sq",
"sdnet_flow_lag1","sdpct_flow_lag1")
descrip_stats_data_monthly0 <- descrip_stats_data_monthly0[,!(colnames(descrip_stats_data_monthly0) %in% descrip_stats_fund_vars_remove)]
row.names(descrip_stats_data_monthly0) <- seq(nrow(descrip_stats_data_monthly0))
descrip_stats_ios_vars_remove <- c("month",
"punct_ios","conjunctions_ios","prepositions_ios","normalized_space_ios",
"pronouns_ios","ttr_ios")
descrip_stats_data_monthly0 <- descrip_stats_data_monthly0[,!(colnames(descrip_stats_data_monthly0) %in% descrip_stats_ios_vars_remove)]
row.names(descrip_stats_data_monthly0) <- seq(nrow(descrip_stats_data_monthly0))
descrip_stats_data_monthly <- data.frame(descrip_stats_data_monthly0,
year_group_id=NA,
stringsAsFactors=FALSE)
descrip_stats_data_monthly[,"year_group_id"] <- ifelse((descrip_stats_data_monthly[,"yr"]>=1994 & descrip_stats_data_monthly[,"yr"]<=1999), 1,
ifelse((descrip_stats_data_monthly[,"yr"]>=2000 & descrip_stats_data_monthly[,"yr"]<=2005), 2,
ifelse((descrip_stats_data_monthly[,"yr"]>=2006 & descrip_stats_data_monthly[,"yr"]<=2011), 3,
descrip_stats_data_monthly[,"year_group_id"])))
rm2(descrip_stats_data_monthly0)
### Create Aggregate Averages From Monthly Variables
descrip_stats_data_monthly_averages <- ddply(.data=descrip_stats_data_monthly, .variables=identifier, .fun = function(z){
# z <- descrip_stats_data_monthly[descrip_stats_data_monthly[,identifier]==5002,]
z_out <- data.frame(z,
avg_return=mean(z[,"monthly_ret"]),
volatilty=sd(z[,"monthly_ret"]),
size=log(max(z[,"aum"])),
max_age_y=max(z[,"age_y"]),
stringsAsFactors=FALSE)
return(z_out)
}, .progress = "none", .inform = FALSE, .drop = TRUE, .parallel = FALSE, .paropts = NULL)
rm2(descrip_stats_data_monthly)
### Create Yearly Level Data
monthly_level_cols <- c("date","yr_month","age_y","nflow","pflow","mktadjret","mktadjret_sq","fund_ret_mkt_neg",
"monthly_ret","monthly_ret_lag1","monthly_ret_lag2","monthly_ret_lag3","monthly_ret_lag4",
"aum","aum_lag1","aum_lag2","aum_lag3","aum_lag4",
"log_aum","log_aum_lag1","log_aum_lag2","log_aum_lag3","log_aum_lag4",
"vwretd","vwretd_annualized","vwretx","vwretx_annualized")
descrip_stats_data_yearly0 <-  descrip_stats_data_monthly_averages[,!(colnames(descrip_stats_data_monthly_averages) %in% monthly_level_cols)]
descrip_stats_data_yearly <- unique(descrip_stats_data_yearly0)
row.names(descrip_stats_data_yearly) <- seq(nrow(descrip_stats_data_yearly))
rm2(descrip_stats_data_yearly0)
### Create Aggregate Averages From Yearly Variables
yearly_avg_cols <- c("all_similarity_050pct_ios","all_similarity_100pct_ios","all_similarity_250pct_ios",
"all_similarity_500pct_ios","all_similarity_750pct_ios","all_similarity_900pct_ios",
"main_investment_strategy_similarity_050pct_ios","main_investment_strategy_similarity_100pct_ios","main_investment_strategy_similarity_250pct_ios",
"main_investment_strategy_similarity_500pct_ios","main_investment_strategy_similarity_750pct_ios","main_investment_strategy_similarity_900pct_ios",
"all_similarity_050pct_ios_below_quartile1","all_similarity_050pct_ios_above_quartile3",
"main_investment_strategy_similarity_050pct_ios_below_quartile1","main_investment_strategy_similarity_050pct_ios_above_quartile3",
"all_similarity_100pct_ios_below_quartile1","all_similarity_100pct_ios_above_quartile3",
"main_investment_strategy_similarity_100pct_ios_below_quartile1","main_investment_strategy_similarity_100pct_ios_above_quartile3",
"all_similarity_250pct_ios_below_quartile1","all_similarity_250pct_ios_above_quartile3",
"main_investment_strategy_similarity_250pct_ios_below_quartile1","main_investment_strategy_similarity_250pct_ios_above_quartile3",
"all_similarity_500pct_ios_below_quartile1","all_similarity_500pct_ios_above_quartile3",
"main_investment_strategy_similarity_500pct_ios_below_quartile1","main_investment_strategy_similarity_500pct_ios_above_quartile3",
"all_similarity_750pct_ios_below_quartile1","all_similarity_750pct_ios_above_quartile3",
"main_investment_strategy_similarity_750pct_ios_below_quartile1","main_investment_strategy_similarity_750pct_ios_above_quartile3",
"all_similarity_900pct_ios_below_quartile1","all_similarity_900pct_ios_above_quartile3")
descrip_stats_data_yearly_averages0 <- data.frame(descrip_stats_data_yearly,
matrix(NA, ncol=length(yearly_avg_cols), nrow=nrow(descrip_stats_data_yearly), dimnames=list(c(),paste("avg",yearly_avg_cols,sep="_"))),stringsAsFactors=FALSE)
descrip_stats_data_yearly_averages <- ddply(.data=descrip_stats_data_yearly_averages0, .variables=identifier, .fun = function(z,yearly_cols){
# z <- descrip_stats_data_yearly_averages0[descrip_stats_data_yearly_averages0[,identifier]==5002,]
# yearly_cols <- yearly_avg_cols
z_out <- z
for (j in 1:length(yearly_cols))
{
# j <- 1
z_out[,paste("avg",yearly_cols[j],sep="_")] <- mean(z_out[,yearly_cols[j]])
}
rm(j)
return(z_out)
}, yearly_cols=yearly_avg_cols,.progress = "none", .inform = FALSE, .drop = TRUE, .parallel = FALSE, .paropts = NULL)
descrip_stats_data_yearly_averages <- descrip_stats_data_yearly_averages[,colnames(descrip_stats_data_yearly_averages)[!(colnames(descrip_stats_data_yearly_averages) %in% c(yearly_avg_cols))]]
rm2(descrip_stats_data_yearly,descrip_stats_data_yearly_averages0,yearly_avg_cols)
### Create Aggregate Level Data
descrip_stats_strategy_cols <- unique(descrip_stats_data_yearly_averages[,"main_investment_strategy"])
descrip_stats_strategy_cols <- sort(descrip_stats_strategy_cols)
descrip_stats_strategy_cols <- c(descrip_stats_strategy_cols[!(descrip_stats_strategy_cols %in% c("Others"))],"Others")
descrip_stats_ios_read_cols <- c("sentences_ios","words_ios","chars_no_space_ios","num_syll_ios","sntc_per_word_ios",
"avg_sentc_length_ios","avg_word_length_ios","avg_syll_word_ios","sntc_per100_ios",
"syll_per100_ios","lett_per100_ios","fog_hard_words_ios",
"ari_ios","coleman_liau_ios","flesch_kincaid_ios","fog_ios","smog_ios",
"avg_grade_level_ios","avg_grade_level_ac_ios","avg_grade_level_acf_ios")
descrip_stats_ios_sim_cols <- names(descrip_stats_data_yearly_averages)[grep("pct_ios", names(descrip_stats_data_yearly_averages))]
descrip_stats_ios_quartile_cols <- c(names(descrip_stats_data_yearly_averages)[grep("below_quartile1", names(descrip_stats_data_yearly_averages))],
names(descrip_stats_data_yearly_averages)[grep("above_quartile3", names(descrip_stats_data_yearly_averages))])
descrip_stats_pattern_cols_99 <- c("per_positive_percent_99","num_zero_percent_99","per_repeats_percent_99","uniform_percent_99",
"string_percent_99","num_pairs_percent_99","per_negative_percent_99","ar_1_percent_99","indexrsq_percent_99",
"kink_percent_99","quality_score_trim0_99","quality_score_trim1_99","quality_score_trim2_99")
descrip_stats_pattern_cols_95 <- c("per_positive_percent_95","num_zero_percent_95","per_repeats_percent_95","uniform_percent_95",
"string_percent_95","num_pairs_percent_95","per_negative_percent_95","ar_1_percent_95","indexrsq_percent_95",
"kink_percent_95","quality_score_trim0_95","quality_score_trim1_95","quality_score_trim2_95")
#descrip_stats_pattern_cols_90 <- c("per_positive_percent_90","num_zero_percent_90","per_repeats_percent_90","uniform_percent_90",
#                                   "string_percent_90","num_pairs_percent_90","per_negative_percent_90","ar_1_percent_90","indexrsq_percent_90",
#                                   "kink_percent_90","quality_score_trim0_90","quality_score_trim1_90","quality_score_trim2_90")
descrip_stats_pattern_cols_90 <- c("per_positive_percent_90","num_zero_percent_90","per_repeats_percent_90","uniform_percent_90",
"string_percent_90","num_pairs_percent_90","per_negative_percent_90","ar_1_percent_90","indexrsq_percent_90",
"kink_percent_90","quality_score_trim0_90","quality_score_trim1_90","quality_score_trim2_90",
"quality_score_trim2_90_Q1","quality_score_trim2_90_Q2","quality_score_trim2_90_Q3","quality_score_trim2_90_Q4")
descrip_stats_pattern_cols <- c(descrip_stats_pattern_cols_99,descrip_stats_pattern_cols_95,descrip_stats_pattern_cols_90)
#descrip_stats_pattern_cols_trim <- descrip_stats_pattern_cols[!(descrip_stats_pattern_cols %in% c(descrip_stats_pattern_cols[grep("per_positive", descrip_stats_pattern_cols)],descrip_stats_pattern_cols[grep("per_repeats", descrip_stats_pattern_cols)]))]
descrip_stats_pattern_cols_trim <- descrip_stats_pattern_cols[!(descrip_stats_pattern_cols %in% c(descrip_stats_pattern_cols[grep("per_positive", descrip_stats_pattern_cols)]))]
rm2(descrip_stats_pattern_cols_99,descrip_stats_pattern_cols_95,descrip_stats_pattern_cols_90)
#yearly_level_cols <- c("yr","year_group_id","sdnet_flow","sdpct_flow",descrip_stats_ios_read_cols,
#                       descrip_stats_ios_sim_cols,descrip_stats_ios_quartile_cols)
yearly_level_cols <- c("yr","year_group_id","sdnet_flow","sdpct_flow",descrip_stats_ios_quartile_cols)
descrip_stats_data_aggregate0 <-  descrip_stats_data_yearly_averages[,!(colnames(descrip_stats_data_yearly_averages) %in% yearly_level_cols)]
#descrip_stats_data_aggregate <- unique(descrip_stats_data_aggregate0)
descrip_stats_data_aggregate <- data.frame(yr=NA,year_group_id=NA,unique(descrip_stats_data_aggregate0),stringsAsFactors=FALSE)
descrip_stats_data_aggregate[,"yr"] <- 9999
descrip_stats_data_aggregate[,"year_group_id"] <- 9999
row.names(descrip_stats_data_aggregate) <- seq(nrow(descrip_stats_data_aggregate))
rm2(descrip_stats_data_aggregate0)
#
# ###############################################################################
# cat("PANEL REGRESSION - VARIABLES", "\n")
# ###############################################################################
#
# pattern_str <- "kink_percent_90  + indexrsq_percent_90 + ar_1_percent_90 + num_zero_percent_90 + uniform_percent_90 + string_percent_90 + num_pairs_percent_90 + per_negative_percent_90"
# quality_str <- "num_zero_percent_90 + uniform_percent_90 + string_percent_90 + num_pairs_percent_90 + per_negative_percent_90"
# nonquality_str <- "kink_percent_90  + indexrsq_percent_90 + ar_1_percent_90"
# pb_str <- "kink_percent_90  + indexrsq_percent_90 + ar_1_percent_90 + num_zero_percent_90 + uniform_percent_90 + string_percent_90"
###############################################################################
cat("PANEL REGRESSION - READBILITY", "\n")
###############################################################################
reg_read_1 <- glm(as.formula(paste("quality_score_trim2_90_Q1","avg_grade_level_ios",sep="~")),
family = binomial(link = "logit"),
data=descrip_stats_data_aggregate)
summary(reg_read_1)
## CIs using profiled log-likelihood
confint(reg_read_1)
## CIs using standard errors
confint.default(reg_read_1)
wald.test(b = coef(reg_read_1), Sigma = vcov(reg_read_1), Terms = 2:2)
wald.test(b = coef(reg_read_1), Sigma = vcov(reg_read_1), Terms = c(0,1))
wald.test(b = coef(reg_read_1), Sigma = vcov(reg_read_1), Terms = cbind(0,1))
wald.test(b = coef(reg_read_1), Sigma = vcov(reg_read_1), L = c(0,1))
wald.test(b = coef(reg_read_1), Sigma = vcov(reg_read_1), L = cbind(0,1))
## odds ratios and 95% CI
exp(cbind(OR = coef(reg_read_1), confint(reg_read_1)))
exp(coef(reg_read_1))
## odds ratios and 95% CI
exp(cbind(OR = coef(reg_read_1), confint(reg_read_1)))
reg_read_1_probit <- glm(as.formula(paste("quality_score_trim2_90_Q1","avg_grade_level_ios",sep="~")),
family = binomial(link = "logit"),
data=descrip_stats_data_aggregate)
summary(reg_read_1_probit)
## CIs using profiled log-likelihood
confint(reg_read_1_probit)
## CIs using standard errors
confint.default(reg_read_1_probit)
wald.test(b = coef(reg_read_1_probit), Sigma = vcov(reg_read_1_probit), Terms = 2:2)
wald.test(b = coef(reg_read_1_probit), Sigma = vcov(reg_read_1_probit), L = cbind(0,1))
reg_read_1_probit <- glm(as.formula(paste("quality_score_trim2_90_Q1","avg_grade_level_ios",sep="~")),
family = binomial(link = "probit"),
data=descrip_stats_data_aggregate)
summary(reg_read_1_probit)
## CIs using profiled log-likelihood
confint(reg_read_1_probit)
## CIs using standard errors
confint.default(reg_read_1_probit)
wald.test(b = coef(reg_read_1_probit), Sigma = vcov(reg_read_1_probit), Terms = 2:2)
wald.test(b = coef(reg_read_1_probit), Sigma = vcov(reg_read_1_probit), L = cbind(0,1))
## odds ratios and 95% CI
exp(cbind(OR = coef(reg_read_1_probit), confint(reg_read_1_probit)))
reg_read_1_probit <- glm(as.formula(paste("quality_score_trim2_90_Q1","avg_grade_level_ios",sep="~")),
family = binomial(link = "probit"),
data=descrip_stats_data_aggregate)
summary(reg_read_1_probit)
## CIs using profiled log-likelihood
confint(reg_read_1_probit)
## CIs using standard errors
confint.default(reg_read_1_probit)
wald.test(b = coef(reg_read_1_probit), Sigma = vcov(reg_read_1_probit), Terms = 2:2)
wald.test(b = coef(reg_read_1_probit), Sigma = vcov(reg_read_1_probit), L = cbind(0,1))
## odds ratios and 95% CI
exp(cbind(OR = coef(reg_read_1_probit), confint(reg_read_1_probit)))
