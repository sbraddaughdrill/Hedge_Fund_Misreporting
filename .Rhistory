#"high_water_mark_bin"
univariate_vars_binary_pattern <- pattern_cols[!(pattern_cols %in% pattern_cols[grep("quality_score",pattern_cols)])]
univariate_vars_binary <- c(univariate_vars_binary_fund,univariate_vars_binary_pattern)
rm2(pattern_cols_99,pattern_cols_95,pattern_cols_90)
rm2(pattern_cols_trim0,pattern_cols_trim1,pattern_cols_trim2)
###############################################################################
cat("UNIVARIATE ANALYSIS - CONTINUOUS", "\n")
###############################################################################
output_directory_univariate_continuous <- paste(output_directory,"univariate_continuous","\\",sep="")
create_directory(output_directory_univariate_continuous,remove=1)
data_all_univariate_continuous <- data_all[,c("yr","yr_month",univariate_vars_dep,univariate_vars_continuous)]
univariate_continuous_quantiles <- 4
univariate_continuous_parameters <- data.frame(matrix(NA,ncol=7,nrow=2,dimnames=list(c(),c("output_dir","note","data","vars","group_var","nums","type"))),stringsAsFactors=FALSE)
univariate_continuous_parameters[1,] <- c(output_directory_univariate_continuous,"continuous","data_all_univariate_continuous","XXX","yr_month",univariate_continuous_quantiles,"year")
univariate_continuous_parameters[2,] <- c(output_directory_univariate_continuous,"continuous","data_all_univariate_continuous","XXX","yr_month",univariate_continuous_quantiles,"agg")
univariate_continuous_year_groups <- data.frame(matrix(NA,ncol=2,nrow=1,dimnames=list(c(),c("Start_yr","End_yr"))),stringsAsFactors=FALSE)
univariate_continuous_year_groups[1,] <- c(start_year,end_year)
a_ply(.data=univariate_continuous_parameters,.margins=1,.fun = function(x,vars_dep,vars_indep,identifier,year_groups){
# x <- univariate_continuous_parameters[1,]
# x <- univariate_continuous_parameters[2,]
# vars_dep <- univariate_vars_dep
# vars_indep <- univariate_vars_continuous
# identifier <- identifier
# year_groups <- univariate_continuous_year_groups
l_ply(.data=vars_dep, .fun = function(y,dep_vars_all,x,vars_indep,identifier,year_groups){
# y <- vars_dep[[1]]
# dep_vars_all <- vars_dep
dep_var <- unlist(y)
cat("DEP VAR:",dep_var, "\n")
data <- get(x=unlist(x$data), envir = globalenv())
group_var <- x$group_var
univariate_vars_indep_continuous <- colnames(data)[!(colnames(data) %in% c("yr",group_var,y))]
quantile_var <- c("quantile_var_indep1","quantile_var_indep2")
quantiles_pct_flow  <- univariate_bins_continuous(data=data,dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=univariate_vars_indep_continuous,parameters=x,quantile_var=quantile_var)
quantile_first_col <- "X1"
quantile_last_col <- paste("X",x$nums,sep="")
# Differences by group
range_str <- "yearly"
quantiles_pct_flow_diff_overall <- univariate_bins_diff(bins=quantiles_pct_flow,range_str=range_str,quantile_first_col=quantile_first_col,quantile_last_col=quantile_last_col,
dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=univariate_vars_indep_continuous,parameters=x,quantile_var=quantile_var)
# Differences by year groups and group
a_ply(.data=year_groups, .margins=1, .fun = function(w,group_var,bins,quantile_first_col,quantile_last_col,dep_var,dep_vars_all,vars_indep,parameters,quantile_var){
# w <- year_groups[1,]
# group_var <- group_var
# bins <- quantiles_pct_flow
# parameters <- x
Start_yr <- w$Start_yr
End_yr <- w$End_yr
range_str <- paste(Start_yr,End_yr,sep="_")
if (group_var == "yr") {
bins_trim <- bins[(bins[,group_var]>=Start_yr & bins[,group_var]<=End_yr),]
} else if (group_var == "yr_month") {
bins_trim <- bins[(as.integer(substr(as.character(bins[,group_var]),1,4))>=Start_yr & as.integer(substr(as.character(bins[,group_var]),1,4))<=End_yr),]
} else {
cat("ERROR IN GROUPS", "\n")
}
bins_trim[,group_var] <- 9999
quantiles_pct_flow_diff_group  <- univariate_bins_diff(bins=bins_trim,range_str=range_str,quantile_first_col=quantile_first_col,quantile_last_col=quantile_last_col,
dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=vars_indep,parameters=parameters,quantile_var=quantile_var)
}, group_var=group_var,bins=quantiles_pct_flow,quantile_first_col=quantile_first_col,quantile_last_col=quantile_last_col,
dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=univariate_vars_indep_continuous,parameters=x,quantile_var=quantile_var,
.expand = TRUE, .progress = "none", .inform = FALSE, .print = FALSE, .parallel = FALSE, .paropts = NULL)
rm(dep_var,data,group_var,univariate_vars_indep_continuous,quantile_var,quantiles_pct_flow)
rm(quantile_first_col,quantile_last_col,range_str,quantiles_pct_flow_diff_overall)
}, x=x, dep_vars_all=vars_dep,vars_indep=vars_indep,identifier=identifier, year_groups=year_groups,
.progress = "none", .inform = FALSE, .print = FALSE, .parallel = FALSE, .paropts = NULL)
},vars_dep=univariate_vars_dep,vars_indep=univariate_vars_continuous,identifier=identifier,year_groups=univariate_continuous_year_groups,.progress = "none")
rm2(output_directory_univariate_continuous,univariate_continuous_quantiles,univariate_continuous_parameters)
###############################################################################
cat("UNIVARIATE ANALYSIS - BINARY", "\n")
###############################################################################
output_directory_univariate_binary <- paste(output_directory,"univariate_binary","\\",sep="")
create_directory(output_directory_univariate_binary,remove=1)
data_all_univariate_binary <- data_all[,c("yr","yr_month",univariate_vars_dep,univariate_vars_binary)]
univariate_binary_quantiles <- 2
univariate_binary_parameters <- data.frame(matrix(NA,ncol=7,nrow=2,dimnames=list(c(),c("output_dir","note","data","vars","group_var","nums","type"))),stringsAsFactors=FALSE)
univariate_binary_parameters[1,] <- c(output_directory_univariate_binary,"binary","data_all_univariate_binary","XXX","yr_month",univariate_binary_quantiles,"year")
univariate_binary_parameters[2,] <- c(output_directory_univariate_binary,"binary","data_all_univariate_binary","XXX","yr_month",univariate_binary_quantiles,"agg")
univariate_binary_year_groups <- data.frame(matrix(NA,ncol=2,nrow=1,dimnames=list(c(),c("Start_yr","End_yr"))),stringsAsFactors=FALSE)
#univariate_binary_year_groups[1,] <- c(start_year,end_year)
univariate_binary_year_groups[1,] <- c(2007,end_year)
a_ply(.data=univariate_binary_parameters,.margins=1,.fun = function(x,vars_dep,vars_indep,identifier,year_groups){
# x <- univariate_binary_parameters[1,]
# x <- univariate_binary_parameters[2,]
# vars_dep <- univariate_vars_dep
# vars_indep <- univariate_vars_binary
# identifier <- identifier
# year_groups <- univariate_binary_year_groups
l_ply(.data=vars_dep, .fun = function(y,dep_vars_all,x,vars_indep,identifier,year_groups){
# y <- vars_dep[[1]]
# dep_vars_all <- vars_dep
dep_var <- unlist(y)
cat("DEP VAR:",dep_var, "\n")
data <- get(x=unlist(x$data), envir = globalenv())
group_var <- x$group_var
univariate_vars_indep_binary <- colnames(data)[!(colnames(data) %in% c("yr",group_var,dep_vars_all))]
quantile_var <- c("quantile_var_indep1","quantile_var_indep2")
quantiles_pct_flow  <- univariate_bins_binary(data=data,dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=univariate_vars_indep_binary,parameters=x,quantile_var=quantile_var)
quantile_first_col <- "X0"
quantile_last_col <- paste("X",(as.integer(x$nums)-1),sep="")
# Differences by group
range_str <- "yearly"
quantiles_pct_flow_diff_overall <- univariate_bins_diff(bins=quantiles_pct_flow,range_str=range_str,quantile_first_col=quantile_first_col,quantile_last_col=quantile_last_col,
dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=univariate_vars_indep_binary,parameters=x,quantile_var=quantile_var)
# Differences by year groups and group
a_ply(.data=year_groups, .margins=1, .fun = function(w,group_var,bins,quantile_first_col,quantile_last_col,dep_var,dep_vars_all,vars_indep,parameters,quantile_var){
# w <- year_groups[1,]
# group_var <- group_var
# bins <- quantiles_pct_flow
# parameters <- x
Start_yr <- w$Start_yr
End_yr <- w$End_yr
range_str <- paste(Start_yr,End_yr,sep="_")
if (group_var == "yr") {
bins_trim <- bins[(bins[,group_var]>=Start_yr & bins[,group_var]<=End_yr),]
} else if (group_var == "yr_month") {
bins_trim <- bins[(as.integer(substr(as.character(bins[,group_var]),1,4))>=Start_yr & as.integer(substr(as.character(bins[,group_var]),1,4))<=End_yr),]
} else {
cat("ERROR IN GROUPS", "\n")
}
bins_trim[,group_var] <- 9999
quantiles_pct_flow_diff_group  <- univariate_bins_diff(bins=bins_trim,range_str=range_str,quantile_first_col=quantile_first_col,quantile_last_col=quantile_last_col,
dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=vars_indep,parameters=parameters,quantile_var=quantile_var)
}, group_var=group_var,bins=quantiles_pct_flow,quantile_first_col=quantile_first_col,quantile_last_col=quantile_last_col,
dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=univariate_vars_indep_binary,parameters=x,quantile_var=quantile_var,
.expand = TRUE, .progress = "none", .inform = FALSE, .print = FALSE, .parallel = FALSE, .paropts = NULL)
rm(dep_var,data,group_var,univariate_vars_indep_binary,quantile_var,quantiles_pct_flow)
rm(quantile_first_col,quantile_last_col,range_str,quantiles_pct_flow_diff_overall)
}, x=x, dep_vars_all=vars_dep,vars_indep=vars_indep,identifier=identifier, year_groups=year_groups,
.progress = "none", .inform = FALSE, .print = FALSE, .parallel = FALSE, .paropts = NULL)
},vars_dep=univariate_vars_dep,vars_indep=univariate_vars_binary,identifier=identifier,year_groups=univariate_binary_year_groups,.progress = "none")
rm2(output_directory_univariate_binary,univariate_binary_quantiles,univariate_binary_parameters)
###############################################################################
cat("UNIVARIATE ANALYSIS - QUALITY SCORE", "\n")
###############################################################################
univariate_vars_manual <- univariate_vars_continuous_pattern
output_directory_univariate_manual <- paste(output_directory,"univariate_manual","\\",sep="")
create_directory(output_directory_univariate_manual,remove=1)
data_all_univariate_manual <- data_all[,c("yr","yr_month",univariate_vars_dep,univariate_vars_continuous_pattern)]
univariate_manual_quantiles <- 4
univariate_manual_parameters <- data.frame(matrix(NA,ncol=7,nrow=2,dimnames=list(c(),c("output_dir","note","data","vars","group_var","nums","type"))),stringsAsFactors=FALSE)
univariate_manual_parameters[1,] <- c(output_directory_univariate_manual,"manual","data_all_univariate_manual","XXX","yr_month",univariate_manual_quantiles,"year")
univariate_manual_parameters[2,] <- c(output_directory_univariate_manual,"manual","data_all_univariate_manual","XXX","yr_month",univariate_manual_quantiles,"agg")
univariate_manual_year_groups <- data.frame(matrix(NA,ncol=2,nrow=1,dimnames=list(c(),c("Start_yr","End_yr"))),stringsAsFactors=FALSE)
#univariate_manual_year_groups[1,] <- c(start_year,end_year)
univariate_manual_year_groups[1,] <- c(2007,end_year)
#max(data_all[,"quality_score_trim2_90"])
#min(data_all[,"quality_score_trim2_90"])
#mean(data_all[,"quality_score_trim2_90"])
#median(data_all[,"quality_score_trim2_90"])
#t(quantile(data_all[,"quality_score_trim2_90"],c(0.01,0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95,0.99)))
#t(quantile(data_all[,"quality_score_trim2_90"],seq(.01,1,.01)))
univariate_manual_breaks <- data.frame(matrix(NA,ncol=3,nrow=length(univariate_vars_manual)*univariate_manual_quantiles,dimnames=list(c(),c("indep_var","start_break","end_break"))),stringsAsFactors=FALSE)
univariate_manual_breaks[1,] <- c(univariate_vars_manual[1],0,1)
univariate_manual_breaks[2,] <- c(univariate_vars_manual[1],2,2)
univariate_manual_breaks[3,] <- c(univariate_vars_manual[1],3,3)
univariate_manual_breaks[4,] <- c(univariate_vars_manual[1],4,7)
a_ply(.data=univariate_manual_parameters,.margins=1,.fun = function(x,vars_dep,vars_indep,identifier,year_groups,breaks){
# x <- univariate_manual_parameters[1,]
# x <- univariate_manual_parameters[2,]
# vars_dep <- univariate_vars_dep
# vars_indep <- univariate_vars_manual
# identifier <- identifier
# year_groups <- univariate_manual_year_groups
# breaks <- univariate_manual_breaks
l_ply(.data=vars_dep, .fun = function(y,dep_vars_all,x,vars_indep,identifier,year_groups,breaks){
# y <- vars_dep[[1]]
# dep_vars_all <- vars_dep
dep_var <- unlist(y)
cat("DEP VAR:",dep_var, "\n")
data <- get(x=unlist(x$data), envir = globalenv())
group_var <- x$group_var
#univariate_vars_indep_manual <- colnames(data)[!(colnames(data) %in% c("yr",group_var,y))]
univariate_vars_indep_manual <- colnames(data)[!(colnames(data) %in% c("yr",group_var,dep_vars_all))]
quantile_var <- c("quantile_var_indep1","quantile_var_indep2")
quantiles_pct_flow  <- univariate_bins_manual(data=data,dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=univariate_vars_indep_manual,parameters=x,quantile_var=quantile_var,breaks=breaks)
quantile_first_col <- "X1"
quantile_last_col <- paste("X",x$nums,sep="")
# Differences by group
range_str <- "yearly"
quantiles_pct_flow_diff_overall <- univariate_bins_diff(bins=quantiles_pct_flow,range_str=range_str,quantile_first_col=quantile_first_col,quantile_last_col=quantile_last_col,
dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=univariate_vars_indep_manual,parameters=x,quantile_var=quantile_var)
# Differences by year groups and group
a_ply(.data=year_groups, .margins=1, .fun = function(w,group_var,bins,quantile_first_col,quantile_last_col,dep_var,dep_vars_all,vars_indep,parameters,quantile_var){
# w <- year_groups[1,]
# group_var <- group_var
# bins <- quantiles_pct_flow
# parameters <- x
Start_yr <- w$Start_yr
End_yr <- w$End_yr
range_str <- paste(Start_yr,End_yr,sep="_")
if (group_var == "yr") {
bins_trim <- bins[(bins[,group_var]>=Start_yr & bins[,group_var]<=End_yr),]
} else if (group_var == "yr_month") {
bins_trim <- bins[(as.integer(substr(as.character(bins[,group_var]),1,4))>=Start_yr & as.integer(substr(as.character(bins[,group_var]),1,4))<=End_yr),]
} else {
cat("ERROR IN GROUPS", "\n")
}
bins_trim[,group_var] <- 9999
quantiles_pct_flow_diff_group  <- univariate_bins_diff(bins=bins_trim,range_str=range_str,quantile_first_col=quantile_first_col,quantile_last_col=quantile_last_col,
dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=vars_indep,parameters=parameters,quantile_var=quantile_var)
}, group_var=group_var,bins=quantiles_pct_flow,quantile_first_col=quantile_first_col,quantile_last_col=quantile_last_col,
dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=univariate_vars_indep_manual,parameters=x,quantile_var=quantile_var,
.expand = TRUE, .progress = "none", .inform = FALSE, .print = FALSE, .parallel = FALSE, .paropts = NULL)
rm(dep_var,data,group_var,univariate_vars_indep_manual,quantile_var,quantiles_pct_flow)
rm(quantile_first_col,quantile_last_col,range_str,quantiles_pct_flow_diff_overall)
}, x=x, dep_vars_all=vars_dep,vars_indep=vars_indep,identifier=identifier, year_groups=year_groups,breaks=breaks,
.progress = "none", .inform = FALSE, .print = FALSE, .parallel = FALSE, .paropts = NULL)
},vars_dep=univariate_vars_dep,vars_indep=univariate_vars_manual,identifier=identifier,year_groups=univariate_manual_year_groups,breaks=univariate_manual_breaks,.progress = "none")
rm2(output_directory_univariate_manual,univariate_manual_quantiles,univariate_manual_parameters)
output_directory_univariate_continuous <- paste(output_directory,"univariate_continuous","\\",sep="")
create_directory(output_directory_univariate_continuous,remove=1)
data_all_univariate_continuous <- data_all[,c("yr","yr_month",univariate_vars_dep,univariate_vars_continuous)]
univariate_continuous_quantiles <- 4
univariate_continuous_parameters <- data.frame(matrix(NA,ncol=7,nrow=2,dimnames=list(c(),c("output_dir","note","data","vars","group_var","nums","type"))),stringsAsFactors=FALSE)
univariate_continuous_parameters[1,] <- c(output_directory_univariate_continuous,"continuous","data_all_univariate_continuous","XXX","yr_month",univariate_continuous_quantiles,"year")
univariate_continuous_parameters[2,] <- c(output_directory_univariate_continuous,"continuous","data_all_univariate_continuous","XXX","yr_month",univariate_continuous_quantiles,"agg")
univariate_continuous_year_groups <- data.frame(matrix(NA,ncol=2,nrow=1,dimnames=list(c(),c("Start_yr","End_yr"))),stringsAsFactors=FALSE)
#univariate_continuous_year_groups[1,] <- c(start_year,end_year)
univariate_continuous_year_groups[1,] <- c(2007,end_year)
a_ply(.data=univariate_continuous_parameters,.margins=1,.fun = function(x,vars_dep,vars_indep,identifier,year_groups){
# x <- univariate_continuous_parameters[1,]
# x <- univariate_continuous_parameters[2,]
# vars_dep <- univariate_vars_dep
# vars_indep <- univariate_vars_continuous
# identifier <- identifier
# year_groups <- univariate_continuous_year_groups
l_ply(.data=vars_dep, .fun = function(y,dep_vars_all,x,vars_indep,identifier,year_groups){
# y <- vars_dep[[1]]
# dep_vars_all <- vars_dep
dep_var <- unlist(y)
cat("DEP VAR:",dep_var, "\n")
data <- get(x=unlist(x$data), envir = globalenv())
group_var <- x$group_var
univariate_vars_indep_continuous <- colnames(data)[!(colnames(data) %in% c("yr",group_var,y))]
quantile_var <- c("quantile_var_indep1","quantile_var_indep2")
quantiles_pct_flow  <- univariate_bins_continuous(data=data,dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=univariate_vars_indep_continuous,parameters=x,quantile_var=quantile_var)
quantile_first_col <- "X1"
quantile_last_col <- paste("X",x$nums,sep="")
# Differences by group
range_str <- "yearly"
quantiles_pct_flow_diff_overall <- univariate_bins_diff(bins=quantiles_pct_flow,range_str=range_str,quantile_first_col=quantile_first_col,quantile_last_col=quantile_last_col,
dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=univariate_vars_indep_continuous,parameters=x,quantile_var=quantile_var)
# Differences by year groups and group
a_ply(.data=year_groups, .margins=1, .fun = function(w,group_var,bins,quantile_first_col,quantile_last_col,dep_var,dep_vars_all,vars_indep,parameters,quantile_var){
# w <- year_groups[1,]
# group_var <- group_var
# bins <- quantiles_pct_flow
# parameters <- x
Start_yr <- w$Start_yr
End_yr <- w$End_yr
range_str <- paste(Start_yr,End_yr,sep="_")
if (group_var == "yr") {
bins_trim <- bins[(bins[,group_var]>=Start_yr & bins[,group_var]<=End_yr),]
} else if (group_var == "yr_month") {
bins_trim <- bins[(as.integer(substr(as.character(bins[,group_var]),1,4))>=Start_yr & as.integer(substr(as.character(bins[,group_var]),1,4))<=End_yr),]
} else {
cat("ERROR IN GROUPS", "\n")
}
bins_trim[,group_var] <- 9999
quantiles_pct_flow_diff_group  <- univariate_bins_diff(bins=bins_trim,range_str=range_str,quantile_first_col=quantile_first_col,quantile_last_col=quantile_last_col,
dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=vars_indep,parameters=parameters,quantile_var=quantile_var)
}, group_var=group_var,bins=quantiles_pct_flow,quantile_first_col=quantile_first_col,quantile_last_col=quantile_last_col,
dep_var=dep_var,dep_vars_all=dep_vars_all,vars_indep=univariate_vars_indep_continuous,parameters=x,quantile_var=quantile_var,
.expand = TRUE, .progress = "none", .inform = FALSE, .print = FALSE, .parallel = FALSE, .paropts = NULL)
rm(dep_var,data,group_var,univariate_vars_indep_continuous,quantile_var,quantiles_pct_flow)
rm(quantile_first_col,quantile_last_col,range_str,quantiles_pct_flow_diff_overall)
}, x=x, dep_vars_all=vars_dep,vars_indep=vars_indep,identifier=identifier, year_groups=year_groups,
.progress = "none", .inform = FALSE, .print = FALSE, .parallel = FALSE, .paropts = NULL)
},vars_dep=univariate_vars_dep,vars_indep=univariate_vars_continuous,identifier=identifier,year_groups=univariate_continuous_year_groups,.progress = "none")
# TODO: Add comment
#
# Author:  Brad
# File:    HF_Misreporting_Quant_Screens.R
# Version: 1.0
# Date:    08.26.2014
# Purpose: This is the Performance Screens from Bollen_Pool (2012)
#
###############################################################################
###############################################################################
cat("SECTION: INITIAL SETUP", "\n")
###############################################################################
# Clear workspace
rm(list = ls(all = TRUE))
rm(list = ls(all.names = TRUE))
# Limit History to not exceed 500 lines
Sys.setenv(R_HISTSIZE = 500)
repo <- c("http://cran.us.r-project.org")
options(repos = structure(repo))
options(install.packages.check.source = FALSE)
# String as factors is False -- used for read.csv
options(StringsAsFactors = FALSE)
# Default maxprint option
options(max.print = 500)
# options(max.print=99999)
# Memory limit
#memory.limit(size = 8183)
#Remove scientific notation if digits less than 100
options("scipen"=100)
#Uknown Strings
#unknowns_strings <- c("",".",NA,"na","n/a","n\a","NA","N/A","N\\A","<NA>","null","NULL",NULL,"nan","NaN",NaN,
#                      NA_integer_,"NA_integer_",NA_complex_,"NA_complex_",NA_character_,
#                      "NA_character_",NA_real_,"NA_real_")
unknowns_strings <- c(" ","\n","",".","n/a","na","NA",NA,"<NA>","null","NULL",NULL,"nan","NaN",NaN,Inf,
NA_integer_,"NA_integer_",NA_complex_,"NA_complex_",
NA_character_,"NA_character_",NA_real_,"NA_real_")
# Set location (1=HOME,2=WORK,3=LAPTOP,4=CORALSEA FROM HOME,5=CORALSEA FROM WORK,6=CORALSEA FROM LAPTOP)
Location <- 1
if (Location == 1) {
#input_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research/Hedge_Fund_Misreporting/Data",winslash="\\", mustWork=TRUE)
input_directory <- normalizePath("F:/Dropbox/Research/Hedge_Fund_Misreporting/Data",winslash="\\", mustWork=TRUE)
output_directory <- normalizePath("F:/Research_temp4",winslash="\\", mustWork=TRUE)
#function_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
function_directory <- normalizePath("F:/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 2) {
input_directory <- normalizePath("C:/Users/bdaughdr/Dropbox/Research/Hedge_Fund_Misreporting/Data",winslash="\\", mustWork=TRUE)
output_directory <- normalizePath("C:/Research_temp4",winslash="\\", mustWork=TRUE)
function_directory <- normalizePath("C:/Users/bdaughdr/Dropbox/Research_Methods/R",winslash="\\", mustWork=TRUE)
} else if (Location == 3) {
input_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research/Hedge_Fund_Misreporting/Data",winslash="\\", mustWork=TRUE)
output_directory <- normalizePath("C:/Research_temp4",winslash="\\", mustWork=TRUE)
function_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 4) {
input_directory <- normalizePath("H:/Research/Hedge_Fund_Misreporting/Data", winslash = "\\", mustWork = TRUE)
output_directory <- normalizePath("C:/Users/bdaughdr/Documents/Research_temp4",winslash="\\", mustWork=TRUE)
#function_directory <- normalizePath("//tsclient/C/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
function_directory <- normalizePath("//tsclient/F/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 5) {
input_directory <- normalizePath("H:/Research/Hedge_Fund_Misreporting/Data", winslash = "\\", mustWork = TRUE)
output_directory <- normalizePath("C:/Users/bdaughdr/Documents/Research_temp4",winslash="\\", mustWork=TRUE)
function_directory <- normalizePath("//tsclient/C/Users/bdaughdr/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 6) {
input_directory <- normalizePath("H:/Research/Hedge_Fund_Misreporting/Data", winslash = "\\", mustWork = TRUE)
output_directory <- normalizePath("C:/Research_temp4",winslash="\\", mustWork=TRUE)
#function_directory <- normalizePath("//tsclient/C/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
function_directory <- normalizePath("//tsclient/F/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else {
cat("ERROR ASSIGNING DIRECTORIES", "\n")
}
rm(Location)
###############################################################################
cat("SECTION: FUNCTIONS", "\n")
###############################################################################
#source(file=paste(function_directory,"functions_db.R",sep="\\"),echo=FALSE)
#source(file=paste(function_directory,"functions_statistics.R",sep="\\"),echo=FALSE)
#source(file=paste(function_directory,"functions_text_analysis.R",sep="\\"),echo=FALSE)
#source(file=paste(function_directory,"functions_text_parse.R",sep="\\"),echo=FALSE)
source(file=paste(function_directory,"functions_misreporting_screens.R",sep="\\"),echo=FALSE)
source(file=paste(function_directory,"functions_utilities.R",sep="\\"),echo=FALSE)
###############################################################################
cat("SECTION: LIBRARIES", "\n")
###############################################################################
#Load External Packages
external_packages <- c("data.table","gdata","ggplot2","MASS","plyr","quantmod",
"reshape2","RSQLite","stringr")
invisible(unlist(sapply(external_packages,load_external_packages, repo_str=repo, simplify=FALSE, USE.NAMES=FALSE)))
installed_packages <- list_installed_packages(external_packages)
rm(installed_packages,external_packages,repo)
###############################################################################
cat("SECTION: SQLITE DATABASES", "\n")
###############################################################################
#crsp_db <- paste(output_directory,"CRSPMF_Formatted.s3db",sep="\\")
#mflinks_db <- paste(output_directory,"MFLinks_Formatted.s3db",sep="\\")
#msd_db <- paste(output_directory,"MDMF_Formatted.s3db",sep="\\")
#similarity_db <- paste(output_directory,"Similarity_Analysis.s3db",sep="\\")
#descriptive_stats_db <- paste(output_directory,"Descriptive_stats.s3db",sep="\\")
#data_fulll_db <- paste(output_directory,"Data_full.s3db",sep="\\")
###############################################################################
cat("IMPORT DATA", "\n")
###############################################################################
identifier <- "Fund_ID"
#analysis_col <- "mktadjret"
analysis_col <- "Monthly_Ret"
#strat_col <- "Main.Investment.Strategy"
strat_col <- "Primary_Investment_Strategy_combcol"
#beg_year <- 1994
#end_year <- 2013
#descriptive_stats_tables <- ListTables(descriptive_stats_db)
#descriptive_stats_fields <- ListFields(descriptive_stats_db)
data_prescreen <- read.csv(file=paste(output_directory,"data_prescreen.csv",sep="\\"),header=TRUE,na.strings="NA",stringsAsFactors=FALSE)
cutoffs_60 <- read.csv(file=paste(output_directory,"cutoff_simulation","Cutoff_Simulation_60.csv",sep="\\"),header=TRUE,na.strings="NA",stringsAsFactors=FALSE)
cutoffs_120 <- read.csv(file=paste(output_directory,"cutoff_simulation","Cutoff_Simulation_120.csv",sep="\\"),header=TRUE,na.strings="NA",stringsAsFactors=FALSE)
###############################################################################
cat("SECTION: DATA CLEANING", "\n")
###############################################################################
data_prescreen[,strat_col] <- gsub(" {2,}", " ",data_prescreen[,strat_col], perl=TRUE)
data_prescreen[,strat_col] <- gsub("^\\s+|\\s+$", "",data_prescreen[,strat_col], perl=TRUE)
#data_prescreen[,strat_col] <- gsub(" ", "",data_prescreen[,strat_col], perl=TRUE)
data_prescreen[,strat_col] <- ifelse(data_prescreen[,strat_col]=="",NA,data_prescreen[,strat_col])
### Preallocate Data
data_trim_lag_count <- 4
data_trim_unlagged_cols <- c("Monthly_Ret","mktadjret")
#data_trim_lagged_cols <- c(paste(data_trim_unlagged_cols[1],"_lag",seq(1,data_trim_lag_count),sep=""),
#                           paste(data_trim_unlagged_cols[2],"_lag",seq(1,data_trim_lag_count),sep=""))
data_trim_lagged_cols <- unlist(lapply(data_trim_unlagged_cols,function(x,lag_length){paste(x,"_lag",seq(1,lag_length),sep="")},lag_length=data_trim_lag_count))
data_trim_lagged_full_cols <- c(data_trim_unlagged_cols,data_trim_lagged_cols)
data_trim_lagged_full_cols <- sort(data_trim_lagged_full_cols)
data_trim_lagged_trim_cols <- data_trim_lagged_full_cols[grepl(analysis_col, data_trim_lagged_full_cols)]
data_trim_id_cols <- c(identifier,"yr","month","yr_month")
#data_trim_id_full_cols <- c("return_id",data_trim_id_cols)
data_trim_id_full_cols <- c(data_trim_id_cols)
data_trim_id_full_cols <- c(identifier,data_trim_id_full_cols[!data_trim_id_full_cols %in% c(identifier)])
data_trim0 <- data.frame(data_prescreen[,c(data_trim_id_cols,data_trim_unlagged_cols,strat_col)],
#return_id=NA,
#matrix(NA, ncol=length(data_trim_unlagged_cols)*data_trim_lag_count, nrow=nrow(data_prescreen), dimnames=list(c(), data_trim_lagged_cols)),
data_prescreen[,c(data_trim_lagged_cols)],
stringsAsFactors=FALSE)
#data_trim0 <- data_trim0[,c(data_trim_id_full_cols, colnames(data_trim0[,!(colnames(data_trim0) %in% c(data_trim_id_full_cols))]))]
data_trim0 <- data_trim0[,c(data_trim_id_full_cols,strat_col,data_trim_lagged_full_cols)]
### Make sure funds have atleast 24 months of returns
#data_trim0_firm_counts <- count(data_trim0, c(identifier))
data_trim0_firm_counts0 <- data_trim0[!is.na(data_trim0[,c("Monthly_Ret")]),]
data_trim0_firm_counts1 <- count(data_trim0_firm_counts0, c(identifier))
#data_trim0_firm_counts1 <- count(data_trim0_firm_counts0, c(identifier,strat_col))
data_trim0_firm_keep <- data_trim0_firm_counts1[data_trim0_firm_counts1[,"freq"]>=24,]
data_trim0_firm_keep <- data_trim0_firm_keep[!is.na(data_trim0_firm_keep[,c(identifier)]),]
#data_trim0_firm_keep <- data_trim0_firm_keep[!is.na(data_trim0_firm_keep[,c(strat_col)]),]
row.names(data_trim0_firm_keep) <- seq(nrow(data_trim0_firm_keep))
data_trim0_firm_drop <- data_trim0_firm_counts1[data_trim0_firm_counts1[,"freq"]<24,]
data_trim0_firm_drop <- data_trim0_firm_drop[!is.na(data_trim0_firm_drop[,c(identifier)]),]
#data_trim0_firm_drop <- data_trim0_firm_drop[!is.na(data_trim0_firm_drop[,c(strat_col)]),]
row.names(data_trim0_firm_drop) <- seq(nrow(data_trim0_firm_drop))
data_trim <- data_trim0[(data_trim0[,c(identifier)] %in% data_trim0_firm_keep[,c(identifier)]),]
#data_trim <- data_trim[,!(colnames(data_trim) %in% strat_col)]
row.names(data_trim) <- seq(nrow(data_trim))
rm(data_trim0,data_trim0_firm_keep,data_trim0_firm_drop)
rm(data_trim0_firm_counts0,data_trim0_firm_counts1)
#max(data_trim[,"monthly_ret"])
#min(data_trim[,"monthly_ret"])
#mean(data_trim[,"monthly_ret"])
#median(data_trim[,"monthly_ret"])
#max(count(data_trim,identifier)[,"freq"])
#min(count(data_trim,identifier)[,"freq"])
#mean(count(data_trim,identifier)[,"freq"])
#median(count(data_trim,identifier)[,"freq"])
### Create Return ID
# data_trim <- data_trim[order(data_trim[,identifier],data_trim[,"yr_month"]),]
# row.names(data_trim) <- seq(nrow(data_trim))
#
# data_trim <- ddply(.data=data_trim, .variables=c(identifier), .fun = function(x){
#
#   x[,"return_id"] <- seq(1,nrow(x))
#
#   return(x)
#
# },.drop = FALSE)
#
# data_trim <- data_trim[order(data_trim[,identifier],data_trim[,"return_id"]),]
# row.names(data_trim) <- seq(nrow(data_trim))
### Populate Lags
# for (i in 1:length(data_trim_unlagged_cols))
# {
#   #i <- 1
#   #i <- 2
#   #i <- 3
#
#   data_trim[,paste(data_trim_unlagged_cols[i],"_lag",seq(1,data_trim_lag_count),sep="")] <-
#     create_lags2(data_trim,data_trim_unlagged_cols[i],identifier,data_trim_lag_count)
#
#   progress_function(outer_loop_count=i, outer_loop_start_val=1, outer_loop_end_val=length(data_trim_unlagged_cols), inner_loop_count=1, inner_loop_start_val=1, inner_loop_end_val=1)
#
# }
# rm(i)
#
# rm(data_trim_lag_count,data_trim_unlagged_cols,data_trim_lagged_cols,data_trim_lagged_full_cols)
### Create Overall Data
data_trim_overall <- data_trim
data_trim_overall[,identifier] <- 0
#data_trim_overall[,"return_id"] <- seq(nrow(data_trim_overall))
### Combine Overall and Group Data
#data_trim_full <- rbind(data_trim_overall,data_trim)
data_trim_full <- rbindlist(list(data_trim_overall,data_trim))
data_trim_full <- as.data.frame(data_trim_full,stringsAsFactors=FALSE)
rm(data_trim_overall,data_trim)
rm(data_trim_id_cols)
# a0a <- round(data_prescreen[,data_trim_unlagged_cols],digits=4)
# colnames(a0a) <- paste(data_trim_unlagged_cols,"round",sep="_")
#
# a0b <- round2(data_prescreen[,data_trim_unlagged_cols],digits=4)
# colnames(a0b) <- paste(data_trim_unlagged_cols,"round2",sep="_")
#
# a1_trim0 <- cbind(a0a,a0b)
# a1_trim1 <- data.frame(a1_trim0[,colnames(a1_trim0) %in% c(paste(data_trim_unlagged_cols,"round",sep="_"),paste(data_trim_unlagged_cols,"round2",sep="_"))],
#                        matrix(NA, ncol=length(data_trim_unlagged_cols), nrow=1, dimnames=list(c(), paste(data_trim_unlagged_cols,"same_flag",sep="_"))),
#                        stringsAsFactors=FALSE)
# a1_trim1 <- a1_trim1[,sort(colnames(a1_trim1))]
# a1_trim2 <- a1_trim1[rowSums(is.na(a1_trim1[,1:ncol(a1_trim1)]))<ncol(a1_trim1),]
#
# a1_trim2[,paste(data_trim_unlagged_cols[1],"round",sep="_")] <- as.character(a1_trim2[,paste(data_trim_unlagged_cols[1],"round",sep="_")])
# a1_trim2[,paste(data_trim_unlagged_cols[1],"round2",sep="_")] <- as.character(a1_trim2[,paste(data_trim_unlagged_cols[1],"round2",sep="_")])
# a1_trim2[,paste(data_trim_unlagged_cols[2],"round",sep="_")] <- as.character(a1_trim2[,paste(data_trim_unlagged_cols[2],"round",sep="_")])
# a1_trim2[,paste(data_trim_unlagged_cols[2],"round2",sep="_")] <- as.character(a1_trim2[,paste(data_trim_unlagged_cols[2],"round2",sep="_")])
#
# a1_trim2[,paste(data_trim_unlagged_cols[1],"same_flag",sep="_")] <- ifelse((is.na(a1_trim2[,paste(data_trim_unlagged_cols[1],"round",sep="_")]) | is.na(a1_trim2[,paste(data_trim_unlagged_cols[1],"round2",sep="_")])),NA,
#                                                                            ifelse(a1_trim2[,paste(data_trim_unlagged_cols[1],"round",sep="_")]==a1_trim2[,paste(data_trim_unlagged_cols[1],"round2",sep="_")],1,0))
#
# a1_trim2[,paste(data_trim_unlagged_cols[2],"same_flag",sep="_")] <- ifelse((is.na(a1_trim2[,paste(data_trim_unlagged_cols[2],"round",sep="_")]) | is.na(a1_trim2[,paste(data_trim_unlagged_cols[2],"round2",sep="_")])),NA,
#                                                                            ifelse(a1_trim2[,paste(data_trim_unlagged_cols[2],"round",sep="_")]==a1_trim2[,paste(data_trim_unlagged_cols[2],"round2",sep="_")],1,0))
#
# a1_trim3 <- a1_trim2[!(is.na(a1_trim2[,paste(data_trim_unlagged_cols[1],"same_flag",sep="_")]) | is.na(a1_trim2[,paste(data_trim_unlagged_cols[2],"same_flag",sep="_")])),]
# a1_trim3 <- a1_trim3[(a1_trim3[,paste(data_trim_unlagged_cols[1],"same_flag",sep="_")]==0 | a1_trim3[,paste(data_trim_unlagged_cols[2],"same_flag",sep="_")]==0),]
#
# rm(a0a,a0b,a1_trim0,a1_trim1,a1_trim2,a1_trim3)
###############################################################################
cat("SECTION: CREATE CUTOFF TABLE", "\n")
###############################################################################
#cutoffs_comb <- rbind(data.frame(Type="60-Month History",cutoffs_60[1:6,],stringsAsFactors=FALSE),data.frame(Type="120-Month History",cutoffs_120[1:6,],stringsAsFactors=FALSE))
cutoffs_comb <- rbindlist(list(data.frame(Type="60-Month History",cutoffs_60[1:6,],stringsAsFactors=FALSE),
data.frame(Type="120-Month History",cutoffs_120[1:6,],stringsAsFactors=FALSE)))
cutoffs_comb <- as.data.frame(cutoffs_comb,stringsAsFactors=FALSE)
rm(cutoffs_60,cutoffs_120)
cutoff_type <- "60-Month History"
