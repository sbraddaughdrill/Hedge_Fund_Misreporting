# String as factors is False -- used for read.csv
options(StringsAsFactors = FALSE)
# Default maxprint option
options(max.print = 500)
# options(max.print=99999)
# Memory limit
#memory.limit(size = 8183)
#Remove scientific notation if digits less than 100
options("scipen"=100)
#Uknown Strings
#unknowns_strings <- c("",".",NA,"na","n/a","n\a","NA","N/A","N\\A","<NA>","null","NULL",NULL,"nan","NaN",NaN,
#                      NA_integer_,"NA_integer_",NA_complex_,"NA_complex_",NA_character_,
#                      "NA_character_",NA_real_,"NA_real_")
unknowns_strings <- c(" ","\n","",".","n/a","na","NA",NA,"<NA>","null","NULL",NULL,"nan","NaN",NaN,Inf,
NA_integer_,"NA_integer_",NA_complex_,"NA_complex_",
NA_character_,"NA_character_",NA_real_,"NA_real_")
# Set location (1=HOME,2=WORK,3=LAPTOP,4=CORALSEA FROM HOME,5=CORALSEA FROM WORK,6=CORALSEA FROM LAPTOP)
Location <- 1
if (Location == 1) {
#input_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research/Hedge_Fund_Misreporting/Data",winslash="\\", mustWork=TRUE)
input_directory <- normalizePath("F:/Dropbox/Research/Hedge_Fund_Misreporting/Data",winslash="\\", mustWork=TRUE)
output_directory <- normalizePath("F:/Research_temp4",winslash="\\", mustWork=TRUE)
#function_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
function_directory <- normalizePath("F:/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 2) {
input_directory <- normalizePath("C:/Users/bdaughdr/Dropbox/Research/Hedge_Fund_Misreporting/Data",winslash="\\", mustWork=TRUE)
output_directory <- normalizePath("C:/Research_temp4",winslash="\\", mustWork=TRUE)
function_directory <- normalizePath("C:/Users/bdaughdr/Dropbox/Research_Methods/R",winslash="\\", mustWork=TRUE)
} else if (Location == 3) {
input_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research/Hedge_Fund_Misreporting/Data",winslash="\\", mustWork=TRUE)
output_directory <- normalizePath("C:/Research_temp4",winslash="\\", mustWork=TRUE)
function_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 4) {
input_directory <- normalizePath("H:/Research/Hedge_Fund_Misreporting/Data", winslash = "\\", mustWork = TRUE)
output_directory <- normalizePath("C:/Users/bdaughdr/Documents/Research_temp4",winslash="\\", mustWork=TRUE)
#function_directory <- normalizePath("//tsclient/C/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
function_directory <- normalizePath("//tsclient/F/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 5) {
input_directory <- normalizePath("H:/Research/Hedge_Fund_Misreporting/Data", winslash = "\\", mustWork = TRUE)
output_directory <- normalizePath("C:/Users/bdaughdr/Documents/Research_temp4",winslash="\\", mustWork=TRUE)
function_directory <- normalizePath("//tsclient/C/Users/bdaughdr/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 6) {
input_directory <- normalizePath("H:/Research/Hedge_Fund_Misreporting/Data", winslash = "\\", mustWork = TRUE)
output_directory <- normalizePath("C:/Research_temp4",winslash="\\", mustWork=TRUE)
#function_directory <- normalizePath("//tsclient/C/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
function_directory <- normalizePath("//tsclient/F/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else {
cat("ERROR ASSIGNING DIRECTORIES", "\n")
}
rm(Location)
###############################################################################
cat("SECTION: FUNCTIONS", "\n")
###############################################################################
source(file=paste(function_directory,"functions_db.R",sep="\\"),echo=FALSE)
source(file=paste(function_directory,"functions_statistics.R",sep="\\"),echo=FALSE)
source(file=paste(function_directory,"functions_text_analysis.R",sep="\\"),echo=FALSE)
#source(file=paste(function_directory,"functions_text_parse.R",sep="\\"),echo=FALSE)
source(file=paste(function_directory,"functions_utilities.R",sep="\\"),echo=FALSE)
###############################################################################
cat("SECTION: LIBRARIES", "\n")
###############################################################################
#Load External Packages
external_packages <- c("benford.analysis","BenfordTests","data.table","gdata","ggplot2","MASS","plyr","quantmod",
"reshape2","RSQLite","stringr")
invisible(unlist(sapply(external_packages,load_external_packages, repo_str=repo, simplify=FALSE, USE.NAMES=FALSE)))
installed_packages <- list_installed_packages(external_packages)
rm(installed_packages,external_packages,repo)
###############################################################################
cat("SECTION: SQLITE DATABASES", "\n")
###############################################################################
#crsp_db <- paste(output_directory,"CRSPMF_Formatted.s3db",sep="\\")
#mflinks_db <- paste(output_directory,"MFLinks_Formatted.s3db",sep="\\")
#msd_db <- paste(output_directory,"MDMF_Formatted.s3db",sep="\\")
#similarity_db <- paste(output_directory,"Similarity_Analysis.s3db",sep="\\")
descriptive_stats_db <- paste(output_directory,"Descriptive_stats.s3db",sep="\\")
data_fulll_db <- paste(output_directory,"Data_full.s3db",sep="\\")
###############################################################################
cat("IMPORT DATA", "\n")
###############################################################################
identifier <- "Fund_ID"
beg_year <- 1994
end_year <- 2013
descriptive_stats_tables <- ListTables(descriptive_stats_db)
descriptive_stats_fields <- ListFields(descriptive_stats_db)
#Fund Information
fund_table <- "EurekahedgeHF_Excel_aca_full14"
EurekahedgeHF_Excel_aca_full_import_vars_remove <- c("Minimum_Investment_Size","Subsequent_Investment_Size","Minimum_Investment_Currency_combcol","Subsequent_Investment_Currency_combcol",
"Average_Net_Exposure","Average_Gross_Exposure","Annualized_Target_Return","Annualized_Target_Volatility",
"Geography_combcol","Exchange_Name","Accounting_Method_combcol","Domicile","Currency_combcol","HMRC_Reporting_Status","SEC_Exemption",
"Leverage","Subscription_Frequency","Redemption_Frequency","Redemption_Notification_Period","Lockup","Penalty","Key_Man_Clause",
"Invest_In_Private_Placements_bin","Managed_Accounts_Offered_bin","UCITS_combcol_bin",
"Monthly_Ret2","Yearly_Ret2","Limited_bin")
#"synthetic_prime_broker_count"
# "exposure_cash","exposure_commodities","exposure_currency","exposure_derivatives",
#   "exposure_equities","exposure_fixed_income","exposure_life_insurance",
#   "exposure_non_life_insurance","exposure_private_equity","exposure_real_estate",
#   "instrument_traded_cash","instrument_traded_commodities","instrument_traded_currency","instrument_traded_derivatives",
#   "instrument_traded_equities","instrument_traded_fixed_income","instrument_traded_life_insurance",
#   "instrument_traded_non_life_insurance","instrument_traded_private_equity","instrument_traded_real_estate",
#   "flagship","closed","dead","limited","invest_in_private_placements","managed_accounts_offered","ucits",
#   "management_fee_comments","management_fee_org",
#   "performance_fee_comments","performance_fee_org",
#   "other_fee_comments","other_fee_org",
#   "dividend_policy","dividend_policy_org","dividend_policy_comments",
#   "fund_closed","fund_closed_comments","fund_closed_org",
#   "high_water_mark","high_water_mark_comments","high_water_mark_org",
#   "hurdle_rate","hurdle_rate_comments","hurdle_rate_org",
#   "listed_on_exchange","listed_on_exchange_org","listed_on_exchange_comments",
#   "custodian","custodian1","custodian2","custodian3","custodian4","custodian5","custodian6",
#   "legal_advisor_offshore","legal_advisor_offshore1","legal_advisor_offshore2","legal_advisor_offshore3",
#   "legal_advisor_onshore","legal_advisor_onshore1","legal_advisor_onshore2","legal_advisor_onshore3","legal_advisor_onshore4",
#   "principal_prime_broker_broker","principal_prime_broker_broker1","principal_prime_broker_broker2","principal_prime_broker_broker3",
#   "principal_prime_broker_broker4","principal_prime_broker_broker5","principal_prime_broker_broker6","principal_prime_broker_broker7",
#   "principal_prime_broker_broker8",
#   "secondary_prime_broker_broker","secondary_prime_broker_broker1","secondary_prime_broker_broker2",
#   "secondary_prime_broker_broker3","secondary_prime_broker_broker4","secondary_prime_broker_broker5",
#   "secondary_prime_broker_broker6",
#   "synthetic_prime_broker","synthetic_prime_broker1","synthetic_prime_broker2","synthetic_prime_broker3","synthetic_prime_broker4",
#   "base_currency","minimum_investment_currency","reuters","strategy","secondary_investment_strategy",
#   "administrator","auditor","countries","equalisation_share_class","exchange_name","industry_focus","investment_geography",
#   "manager_profile"
EurekahedgeHF_Excel_aca_full_import_vars_keep0 <- descriptive_stats_fields[descriptive_stats_fields[,"table"]==fund_table,c("field")]
EurekahedgeHF_Excel_aca_full_import_vars_keep1 <- EurekahedgeHF_Excel_aca_full_import_vars_keep0[!(EurekahedgeHF_Excel_aca_full_import_vars_keep0 %in% EurekahedgeHF_Excel_aca_full_import_vars_remove)]
EurekahedgeHF_Excel_aca_full_import_vars_keep2 <- paste(EurekahedgeHF_Excel_aca_full_import_vars_keep1,sep="",collapse=", ")
#Text Information
text_table <- "text_stats_ios"
text_stats_ios_import_vars_remove <- c("lines_ios")
text_stats_ios_import_vars_keep0 <- descriptive_stats_fields[descriptive_stats_fields[,"table"]==text_table,c("field")]
text_stats_ios_import_vars_keep1 <- text_stats_ios_import_vars_keep0[!(text_stats_ios_import_vars_keep0 %in% text_stats_ios_import_vars_remove)]
text_stats_ios_import_vars_keep2 <- paste(text_stats_ios_import_vars_keep1,sep="",collapse=", ")
rm2(EurekahedgeHF_Excel_aca_full_import_vars_keep0,EurekahedgeHF_Excel_aca_full_import_vars_keep1,EurekahedgeHF_Excel_aca_full_import_vars_remove)
rm2(text_stats_ios_import_vars_keep0,text_stats_ios_import_vars_keep1,text_stats_ios_import_vars_remove)
rm2(descriptive_stats_tables,descriptive_stats_fields)
###############################################################################
cat("IMPORT AND FIX FUND DATA", "\n")
###############################################################################
query_EurekahedgeHF_Excel_aca_full <- ""
query_EurekahedgeHF_Excel_aca_full <- paste(query_EurekahedgeHF_Excel_aca_full, "select       ",EurekahedgeHF_Excel_aca_full_import_vars_keep2, sep=" ")
query_EurekahedgeHF_Excel_aca_full <- paste(query_EurekahedgeHF_Excel_aca_full, "from         ",fund_table, "                                ", sep=" ")
query_EurekahedgeHF_Excel_aca_full <- trim(gsub(" {2,}", " ", query_EurekahedgeHF_Excel_aca_full))
rm2(EurekahedgeHF_Excel_aca_full_import_vars_keep2)
#EurekahedgeHF_Excel_aca_full <- runsql("SELECT * FROM EurekahedgeHF_Excel_aca_full14",descriptive_stats_db)
EurekahedgeHF_Excel_aca_full <- data.frame(runsql(query_EurekahedgeHF_Excel_aca_full,descriptive_stats_db),
total_fee=NA,
fund_ret_mkt_neg=NA,
yr_month=NA,
stringsAsFactors=FALSE)
#colnames(EurekahedgeHF_Excel_aca_full) <- tolower(colnames(EurekahedgeHF_Excel_aca_full))
EurekahedgeHF_Excel_aca_full2 <- unknown_to_NA(EurekahedgeHF_Excel_aca_full,unknowns_strings)
rm(EurekahedgeHF_Excel_aca_full)
EurekahedgeHF_Excel_aca_full2 <- EurekahedgeHF_Excel_aca_full2[!is.na(EurekahedgeHF_Excel_aca_full2[,identifier]),]
EurekahedgeHF_Excel_aca_full2 <- EurekahedgeHF_Excel_aca_full2[!is.na(EurekahedgeHF_Excel_aca_full2[,"yr"]),]
EurekahedgeHF_Excel_aca_full2 <- EurekahedgeHF_Excel_aca_full2[!is.na(EurekahedgeHF_Excel_aca_full2[,"month"]),]
EurekahedgeHF_Excel_aca_full2[,"date"] <- as.Date(EurekahedgeHF_Excel_aca_full2[,"date"],origin="1970-01-01",na.rm=TRUE)
EurekahedgeHF_Excel_aca_full2[,"Date_Added"] <- as.Date(EurekahedgeHF_Excel_aca_full2[,"Date_Added"],origin="1970-01-01",na.rm=TRUE)
EurekahedgeHF_Excel_aca_full2[,"Inception_Date"] <- as.Date(EurekahedgeHF_Excel_aca_full2[,"Inception_Date"],origin="1970-01-01",na.rm=TRUE)
EurekahedgeHF_Excel_aca_full2[,"chgdt"] <- as.Date(EurekahedgeHF_Excel_aca_full2[,"chgdt"],format="%Y-%m-%d",na.rm=TRUE)
#Create total fees, negative return, and yr_month
EurekahedgeHF_Excel_aca_full2[,"total_fee"] <- rowSums(EurekahedgeHF_Excel_aca_full2[,c("Management_Fee_bin","Performance_Fee_bin","Other_Fee_bin")],na.rm=TRUE)
EurekahedgeHF_Excel_aca_full2[,"fund_ret_mkt_neg"] <- ifelse(EurekahedgeHF_Excel_aca_full2[,"mktadjret"]<0, EurekahedgeHF_Excel_aca_full2[,"mktadjret"], 0)
EurekahedgeHF_Excel_aca_full2[,"fund_ret_mkt_neg"] <- ifelse(is.na(EurekahedgeHF_Excel_aca_full2[,"mktadjret"]), NA, EurekahedgeHF_Excel_aca_full2[,"fund_ret_mkt_neg"])
EurekahedgeHF_Excel_aca_full2[,"yr_month"] <- paste(EurekahedgeHF_Excel_aca_full2[,"yr"],sprintf("%02d", EurekahedgeHF_Excel_aca_full2[,"month"]),sep="_")
#Trim Years
monthly_data_all_yr_trim <- EurekahedgeHF_Excel_aca_full2[(EurekahedgeHF_Excel_aca_full2[,"yr"]>=beg_year & EurekahedgeHF_Excel_aca_full2[,"yr"]<=end_year),]
rm2(EurekahedgeHF_Excel_aca_full2)
monthly_data_all04 <- monthly_data_all_yr_trim
rm2(monthly_data_all_yr_trim)
#Fix dates
#
#monthly_data_all04_date_cols <- c("Date_Added","Dead_Date","Inception_Date","date","chgdt")
#for (i in 1:length(monthly_data_all04_date_cols))
#{
#  monthly_data_all04[,monthly_data_all04_date_cols[i]] <- as.Date(monthly_data_all04[,monthly_data_all04_date_cols[i]], format="%Y-%m-%d", origin="1970-01-01")
#}
#rm2(monthly_data_all04_date_cols,i)
#Scale AUM and Minimum Invstment Size
#monthly_data_all04[,"aum"] <- (as.numeric(monthly_data_all04[,"aum"])/1000000)
#monthly_data_all04[,"aum_lag1"] <- (as.numeric(monthly_data_all04[,"aum_lag1"])/1000000)
#monthly_data_all04[,"aum_lag2"] <- (as.numeric(monthly_data_all04[,"aum_lag2"])/1000000)
#monthly_data_all04[,"aum_lag3"] <- (as.numeric(monthly_data_all04[,"aum_lag3"])/1000000)
#monthly_data_all04[,"aum_lag4"] <- (as.numeric(monthly_data_all04[,"aum_lag4"])/1000000)
#monthly_data_all04[,"minimum_investment_size"] <- (as.numeric(monthly_data_all04[,"minimum_investment_size"])/1000000)
# #Strip out comments in parenetheses
# monthly_data_all_strip_comments_cols <- c("annualized_target_return","annualized_target_volatility","domicile","fund_size_us_m",
#                                           "leverage","lock_up","redemption_frequency","redemption_notification_period","subscription_frequency")
#
# #Rename original columns
# monthly_data_all05 <- rename.vars(monthly_data_all04,
#                                   monthly_data_all_strip_comments_cols,
#                                   paste(monthly_data_all_strip_comments_cols,"_org",sep=""))
#
# rm2(monthly_data_all04)
#
# strip_cols <- c(monthly_data_all_strip_comments_cols,
#                 paste(monthly_data_all_strip_comments_cols,"_comments",sep=""))
#
# monthly_data_all06 <-  data.frame(monthly_data_all05,
#                                   matrix(NA, ncol=length(strip_cols), nrow=nrow(monthly_data_all05), dimnames=list(c(), strip_cols)),
#                                   stringsAsFactors=FALSE)
#
# monthly_data_all06 <- monthly_data_all06[,sort(colnames(monthly_data_all06), decreasing = FALSE)]
#
# monthly_data_all06 <- strip_comments(monthly_data_all06,monthly_data_all_strip_comments_cols)
# monthly_data_all06 <- as.data.frame(monthly_data_all06,stringsAsFactors=FALSE)
#
# rm2(monthly_data_all05,monthly_data_all_strip_comments_cols,strip_cols)
#
# #Get text before comments
# monthly_data_all_yn_cols <- c("annualized_target_return","annualized_target_volatility","domicile","fund_size_us_m",
#                               "leverage","lock_up","redemption_frequency","redemption_notification_period","subscription_frequency")
# monthly_data_all07 <- create_noncomments(monthly_data_all06,monthly_data_all_yn_cols)
# monthly_data_all07 <- as.data.frame(monthly_data_all07,stringsAsFactors=FALSE)
#
# rm2(monthly_data_all06,monthly_data_all_yn_cols)
#
# #Check for uknowns
# monthly_data_all_check_unknown_cols <- c("annualized_target_return","annualized_target_volatility","domicile","fund_size_us_m",
#                                          "leverage","lock_up","redemption_frequency","redemption_notification_period","subscription_frequency")
# monthly_data_all08 <- data.table(monthly_data_all07)[, (monthly_data_all_check_unknown_cols) := llply(.SD, vector_clean_na,unknowns=unknowns_strings,.progress = "text"),
#                                                      .SDcols = monthly_data_all_check_unknown_cols]
# monthly_data_all08 <- as.data.frame(monthly_data_all08, stringsAsFactors=FALSE)
#
# rm2(monthly_data_all07,monthly_data_all_check_unknown_cols)
#
# #Change not specificied to NA
# NA_Phrases <- c("NA","N/A","N\\A","NOT APPLICABLE","NOT APPILCABLE","NOT DEFINED","NOT DISCLOSED","NOT DISLCOSED","UNDISCLOSED",
#                 "TO BE ADVISED","TO BE ADVISE","TBA","SEE PROSPECTUS FOR FULL DETAILS","UPON REQUEST",
#                 "SUBJECT TO MANAGER'S DISCRETION")
# monthly_data_all_not_specified_cols <- c("annualized_target_return","annualized_target_volatility","domicile","fund_size_us_m",
#                                          "leverage","lock_up","redemption_frequency","redemption_notification_period","subscription_frequency")
# monthly_data_all09 <- not_specified_to_na(monthly_data_all08,monthly_data_all_not_specified_cols,NA_Phrases)
# monthly_data_all09 <- as.data.frame(monthly_data_all09,stringsAsFactors=FALSE)
#
# rm2(monthly_data_all08,monthly_data_all_not_specified_cols,NA_Phrases)
#
# #Change no phrases to NO
# NO_Phrases <- c("NIL","NONE","NONE AFTER 12 MONTHS","NONE AFTER 1ST YEAR","NO DIVIDEND","NON DIVIDEND","LITTLE OR NO")
#
# monthly_data_all_no_phrases_cols <- c("annualized_target_return","annualized_target_volatility","domicile","fund_size_us_m",
#                                       "leverage","lock_up","redemption_frequency","redemption_notification_period","subscription_frequency")
# monthly_data_all10 <- no_to_no(monthly_data_all09,monthly_data_all_no_phrases_cols,NO_Phrases)
# monthly_data_all10 <- as.data.frame(monthly_data_all10,stringsAsFactors=FALSE)
#
# rm2(monthly_data_all09,monthly_data_all_no_phrases_cols,NO_Phrases)
#
# #Change yes phrases to YES
# YES_Phrases <- c("RARELY","OCCASIONALLY")
# monthly_data_all_yes_phrases_cols <- c("annualized_target_return","annualized_target_volatility","domicile","fund_size_us_m",
#                                        "leverage","lock_up","redemption_frequency","redemption_notification_period","subscription_frequency")
# monthly_data_all11 <- yes_to_yes(monthly_data_all10,monthly_data_all_yes_phrases_cols,YES_Phrases)
# monthly_data_all11 <- as.data.frame(monthly_data_all11,stringsAsFactors=FALSE)
#
# rm2(monthly_data_all10,monthly_data_all_yes_phrases_cols,YES_Phrases)
#
# #Change Y/N to binary
# monthly_data_all_yn_to_bin_cols <-  c("leverage", "lock_up")
#
# bin_cols <- paste(monthly_data_all_yn_to_bin_cols,"_bin",sep="")
#
# monthly_data_all12 <-  data.frame(monthly_data_all11, matrix(NA, ncol=length(bin_cols), nrow=nrow(monthly_data_all11), dimnames=list(c(), bin_cols)), stringsAsFactors=FALSE)
#
# monthly_data_all12[,bin_cols] <-  monthly_data_all12[,monthly_data_all_yn_to_bin_cols]
#
# monthly_data_all12 <- yn_to_binary(monthly_data_all12,bin_cols)
# monthly_data_all12 <- as.data.frame(monthly_data_all12,stringsAsFactors=FALSE)
#
# monthly_data_all12 <- data.table(monthly_data_all12)[, (bin_cols) := llply(.SD, vector_clean_na,unknowns=unknowns_strings,.progress = "text"), .SDcols = bin_cols]
# monthly_data_all12 <- as.data.frame(monthly_data_all12,stringsAsFactors=FALSE)
#
# rm2(monthly_data_all11,monthly_data_all_yn_to_bin_cols,bin_cols)
#
# #Create domicile dummy
# monthly_data_all13 <- data.frame(monthly_data_all12,
#                                  domicile_onshore_bin=0,
#                                  stringsAsFactors=FALSE)
#
# rm2(monthly_data_all12)
#
# monthly_data_all13[,"domicile"] <- gsub("[[:punct:]]", "", monthly_data_all13[,"domicile"])
# monthly_data_all13[,"domicile"] <- trim(monthly_data_all13[,"domicile"])
#
#
# monthly_data_all13[,"domicile_onshore_bin"] <- ifelse(is.na(monthly_data_all13[,"domicile"]), NA,
#                                                       ifelse(toupper(monthly_data_all13[,"domicile"])=="UNITED STATES", 1,
#                                                              ifelse(toupper(monthly_data_all13[,"domicile"])=="USA", 1,
#                                                                     ifelse(toupper(monthly_data_all13[,"domicile"])=="US", 1, monthly_data_all13[,"domicile_onshore_bin"]))))
#
#
# #Convert size to numeric
# monthly_data_all_num_cols <- c("fund_size_us_m")
#
# for (i in 1:length(monthly_data_all_num_cols)) {
#   #i <- 1
#   monthly_data_all13[,monthly_data_all_num_cols[i]] <- destring(monthly_data_all13[,monthly_data_all_num_cols[i]])
#   monthly_data_all13[,monthly_data_all_num_cols[i]] <- as.numeric(monthly_data_all13[,monthly_data_all_num_cols[i]])
# }
#
# #Remove unwanted columns
# monthly_data_all14 <- monthly_data_all13[,!(colnames(monthly_data_all13) %in% c("lock_up","lock_up_comments","lock_up_org",
#                                                                                 "leverage","leverage_comments","leverage_org",
#                                                                                 "domicile","domicile_comments","domicile_org",
#                                                                                 "fund_size_us_m_comments","fund_size_us_m_org",
#                                                                                 "annualized_target_return_comments","annualized_target_return_org",
#                                                                                 "annualized_target_volatility_comments","annualized_target_volatility_org",
#                                                                                 "redemption_notification_period_comments","redemption_notification_period_org",
#                                                                                 "subscription_frequency_comments","subscription_frequency_org"))]
#
# rm2(monthly_data_all13,monthly_data_all_num_cols)
#Make sure that fund has a strategy category
monthly_data_all14 <- monthly_data_all04
rm2(monthly_data_all04)
#fund_type_remove <- monthly_data_all14[is.na(monthly_data_all14[,"main_investment_strategy"]),]
fund_type_remove <- monthly_data_all14[is.na(monthly_data_all14[,"Primary_Investment_Strategy_combcol"]),]
fund_type_remove1 <- unique(fund_type_remove[,identifier])
fund_type_remove2 <- fund_type_remove1[!is.na(fund_type_remove1)]
monthly_data_all15 <- monthly_data_all14[!(monthly_data_all14[,identifier] %in% fund_type_remove2),]
rm2(monthly_data_all14)
#Make sure funds have atleast 24 months of returns
firm <- count(monthly_data_all15, c(identifier))
firm_keep <- firm[firm[,"freq"]>=24,]
firm_keep <- firm_keep[!is.na(firm_keep[,c(identifier)]),]
row.names(firm_keep) <- seq(nrow(firm_keep))
monthly_data_all16 <- monthly_data_all15[(monthly_data_all15[,c(identifier)] %in% firm_keep[,c(identifier)]),]
row.names(monthly_data_all16) <- seq(nrow(monthly_data_all16))
rm(monthly_data_all15,firm,firm_keep)
#Trim AUM
monthly_data_all17 <- monthly_data_all16
monthly_data_all17 <- monthly_data_all16[!is.na(monthly_data_all16[,"AUM"]),]
rm2(monthly_data_all16)
monthly_data_all18 <- monthly_data_all17
monthly_data_all18 <- monthly_data_all18[monthly_data_all18[,"AUM"]>=0.1,]
rm2(monthly_data_all17)
#Finalize the data
monthly_data_all19 <- monthly_data_all18
rm2(monthly_data_all18)
monthly_data_all20 <- monthly_data_all19[rowSums(is.na(monthly_data_all19[,1:ncol(monthly_data_all19)]))<ncol(monthly_data_all19),]
monthly_data_all20 <- monthly_data_all20[order(monthly_data_all20[,identifier],
monthly_data_all20[,"yr"],
monthly_data_all20[,"month"]),]
row.names(monthly_data_all20) <- seq(nrow(monthly_data_all20))
rm2(monthly_data_all19)
View(monthly_data_all20)
# TODO: Add comment
#
# Author:  Brad
# File:    HF_Misreporting_Quant_Prescreen.R
# Version: 1.0
# Date:    08.26.2014
# Purpose: Merge the performance and text data
#
###############################################################################
###############################################################################
cat("SECTION: INITIAL SETUP", "\n")
###############################################################################
# Clear workspace
rm(list = ls(all = TRUE))
rm(list = ls(all.names = TRUE))
# Limit History to not exceed 500 lines
Sys.setenv(R_HISTSIZE = 500)
repo <- c("http://cran.us.r-project.org")
options(repos = structure(repo))
options(install.packages.check.source = FALSE)
# String as factors is False -- used for read.csv
options(StringsAsFactors = FALSE)
# Default maxprint option
options(max.print = 500)
# options(max.print=99999)
# Memory limit
#memory.limit(size = 8183)
#Remove scientific notation if digits less than 100
options("scipen"=100)
#Uknown Strings
#unknowns_strings <- c("",".",NA,"na","n/a","n\a","NA","N/A","N\\A","<NA>","null","NULL",NULL,"nan","NaN",NaN,
#                      NA_integer_,"NA_integer_",NA_complex_,"NA_complex_",NA_character_,
#                      "NA_character_",NA_real_,"NA_real_")
unknowns_strings <- c(" ","\n","",".","n/a","na","NA",NA,"<NA>","null","NULL",NULL,"nan","NaN",NaN,Inf,
NA_integer_,"NA_integer_",NA_complex_,"NA_complex_",
NA_character_,"NA_character_",NA_real_,"NA_real_")
# Set location (1=HOME,2=WORK,3=LAPTOP,4=CORALSEA FROM HOME,5=CORALSEA FROM WORK,6=CORALSEA FROM LAPTOP)
Location <- 1
if (Location == 1) {
#input_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research/Hedge_Fund_Misreporting/Data",winslash="\\", mustWork=TRUE)
input_directory <- normalizePath("F:/Dropbox/Research/Hedge_Fund_Misreporting/Data",winslash="\\", mustWork=TRUE)
output_directory <- normalizePath("F:/Research_temp4",winslash="\\", mustWork=TRUE)
#function_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
function_directory <- normalizePath("F:/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 2) {
input_directory <- normalizePath("C:/Users/bdaughdr/Dropbox/Research/Hedge_Fund_Misreporting/Data",winslash="\\", mustWork=TRUE)
output_directory <- normalizePath("C:/Research_temp4",winslash="\\", mustWork=TRUE)
function_directory <- normalizePath("C:/Users/bdaughdr/Dropbox/Research_Methods/R",winslash="\\", mustWork=TRUE)
} else if (Location == 3) {
input_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research/Hedge_Fund_Misreporting/Data",winslash="\\", mustWork=TRUE)
output_directory <- normalizePath("C:/Research_temp4",winslash="\\", mustWork=TRUE)
function_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 4) {
input_directory <- normalizePath("H:/Research/Hedge_Fund_Misreporting/Data", winslash = "\\", mustWork = TRUE)
output_directory <- normalizePath("C:/Users/bdaughdr/Documents/Research_temp4",winslash="\\", mustWork=TRUE)
#function_directory <- normalizePath("//tsclient/C/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
function_directory <- normalizePath("//tsclient/F/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 5) {
input_directory <- normalizePath("H:/Research/Hedge_Fund_Misreporting/Data", winslash = "\\", mustWork = TRUE)
output_directory <- normalizePath("C:/Users/bdaughdr/Documents/Research_temp4",winslash="\\", mustWork=TRUE)
function_directory <- normalizePath("//tsclient/C/Users/bdaughdr/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 6) {
input_directory <- normalizePath("H:/Research/Hedge_Fund_Misreporting/Data", winslash = "\\", mustWork = TRUE)
output_directory <- normalizePath("C:/Research_temp4",winslash="\\", mustWork=TRUE)
#function_directory <- normalizePath("//tsclient/C/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
function_directory <- normalizePath("//tsclient/F/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else {
cat("ERROR ASSIGNING DIRECTORIES", "\n")
}
rm(Location)
###############################################################################
cat("SECTION: FUNCTIONS", "\n")
###############################################################################
source(file=paste(function_directory,"functions_db.R",sep="\\"),echo=FALSE)
source(file=paste(function_directory,"functions_statistics.R",sep="\\"),echo=FALSE)
source(file=paste(function_directory,"functions_text_analysis.R",sep="\\"),echo=FALSE)
#source(file=paste(function_directory,"functions_text_parse.R",sep="\\"),echo=FALSE)
source(file=paste(function_directory,"functions_utilities.R",sep="\\"),echo=FALSE)
###############################################################################
cat("SECTION: LIBRARIES", "\n")
###############################################################################
#Load External Packages
external_packages <- c("benford.analysis","BenfordTests","data.table","gdata","ggplot2","MASS","plyr","quantmod",
"reshape2","RSQLite","stringr")
invisible(unlist(sapply(external_packages,load_external_packages, repo_str=repo, simplify=FALSE, USE.NAMES=FALSE)))
installed_packages <- list_installed_packages(external_packages)
rm(installed_packages,external_packages,repo)
###############################################################################
cat("SECTION: SQLITE DATABASES", "\n")
###############################################################################
#crsp_db <- paste(output_directory,"CRSPMF_Formatted.s3db",sep="\\")
#mflinks_db <- paste(output_directory,"MFLinks_Formatted.s3db",sep="\\")
#msd_db <- paste(output_directory,"MDMF_Formatted.s3db",sep="\\")
#similarity_db <- paste(output_directory,"Similarity_Analysis.s3db",sep="\\")
descriptive_stats_db <- paste(output_directory,"Descriptive_stats.s3db",sep="\\")
data_fulll_db <- paste(output_directory,"Data_full.s3db",sep="\\")
###############################################################################
cat("IMPORT DATA", "\n")
###############################################################################
identifier <- "Fund_ID"
beg_year <- 1994
end_year <- 2013
descriptive_stats_tables <- ListTables(descriptive_stats_db)
descriptive_stats_fields <- ListFields(descriptive_stats_db)
#Fund Information
fund_table <- "EurekahedgeHF_Excel_aca_full14"
EurekahedgeHF_Excel_aca_full_import_vars_remove <- c("Minimum_Investment_Size","Subsequent_Investment_Size","Minimum_Investment_Currency_combcol","Subsequent_Investment_Currency_combcol",
"Average_Net_Exposure","Average_Gross_Exposure","Annualized_Target_Return","Annualized_Target_Volatility",
"Geography_combcol","Exchange_Name","Accounting_Method_combcol","Domicile","Currency_combcol","HMRC_Reporting_Status","SEC_Exemption",
"Leverage","Subscription_Frequency","Redemption_Frequency","Redemption_Notification_Period","Lockup","Penalty","Key_Man_Clause",
"Invest_In_Private_Placements_bin","Managed_Accounts_Offered_bin","UCITS_combcol_bin",
"Monthly_Ret2","Yearly_Ret2","Limited_bin")
#"synthetic_prime_broker_count"
# "exposure_cash","exposure_commodities","exposure_currency","exposure_derivatives",
#   "exposure_equities","exposure_fixed_income","exposure_life_insurance",
#   "exposure_non_life_insurance","exposure_private_equity","exposure_real_estate",
#   "instrument_traded_cash","instrument_traded_commodities","instrument_traded_currency","instrument_traded_derivatives",
#   "instrument_traded_equities","instrument_traded_fixed_income","instrument_traded_life_insurance",
#   "instrument_traded_non_life_insurance","instrument_traded_private_equity","instrument_traded_real_estate",
#   "flagship","closed","dead","limited","invest_in_private_placements","managed_accounts_offered","ucits",
#   "management_fee_comments","management_fee_org",
#   "performance_fee_comments","performance_fee_org",
#   "other_fee_comments","other_fee_org",
#   "dividend_policy","dividend_policy_org","dividend_policy_comments",
#   "fund_closed","fund_closed_comments","fund_closed_org",
#   "high_water_mark","high_water_mark_comments","high_water_mark_org",
#   "hurdle_rate","hurdle_rate_comments","hurdle_rate_org",
#   "listed_on_exchange","listed_on_exchange_org","listed_on_exchange_comments",
#   "custodian","custodian1","custodian2","custodian3","custodian4","custodian5","custodian6",
#   "legal_advisor_offshore","legal_advisor_offshore1","legal_advisor_offshore2","legal_advisor_offshore3",
#   "legal_advisor_onshore","legal_advisor_onshore1","legal_advisor_onshore2","legal_advisor_onshore3","legal_advisor_onshore4",
#   "principal_prime_broker_broker","principal_prime_broker_broker1","principal_prime_broker_broker2","principal_prime_broker_broker3",
#   "principal_prime_broker_broker4","principal_prime_broker_broker5","principal_prime_broker_broker6","principal_prime_broker_broker7",
#   "principal_prime_broker_broker8",
#   "secondary_prime_broker_broker","secondary_prime_broker_broker1","secondary_prime_broker_broker2",
#   "secondary_prime_broker_broker3","secondary_prime_broker_broker4","secondary_prime_broker_broker5",
#   "secondary_prime_broker_broker6",
#   "synthetic_prime_broker","synthetic_prime_broker1","synthetic_prime_broker2","synthetic_prime_broker3","synthetic_prime_broker4",
#   "base_currency","minimum_investment_currency","reuters","strategy","secondary_investment_strategy",
#   "administrator","auditor","countries","equalisation_share_class","exchange_name","industry_focus","investment_geography",
#   "manager_profile"
EurekahedgeHF_Excel_aca_full_import_vars_keep0 <- descriptive_stats_fields[descriptive_stats_fields[,"table"]==fund_table,c("field")]
EurekahedgeHF_Excel_aca_full_import_vars_keep1 <- EurekahedgeHF_Excel_aca_full_import_vars_keep0[!(EurekahedgeHF_Excel_aca_full_import_vars_keep0 %in% EurekahedgeHF_Excel_aca_full_import_vars_remove)]
EurekahedgeHF_Excel_aca_full_import_vars_keep2 <- paste(EurekahedgeHF_Excel_aca_full_import_vars_keep1,sep="",collapse=", ")
#Text Information
text_table <- "text_stats_ios"
text_stats_ios_import_vars_remove <- c("lines_ios")
text_stats_ios_import_vars_keep0 <- descriptive_stats_fields[descriptive_stats_fields[,"table"]==text_table,c("field")]
text_stats_ios_import_vars_keep1 <- text_stats_ios_import_vars_keep0[!(text_stats_ios_import_vars_keep0 %in% text_stats_ios_import_vars_remove)]
text_stats_ios_import_vars_keep2 <- paste(text_stats_ios_import_vars_keep1,sep="",collapse=", ")
rm2(EurekahedgeHF_Excel_aca_full_import_vars_keep0,EurekahedgeHF_Excel_aca_full_import_vars_keep1,EurekahedgeHF_Excel_aca_full_import_vars_remove)
rm2(text_stats_ios_import_vars_keep0,text_stats_ios_import_vars_keep1,text_stats_ios_import_vars_remove)
rm2(descriptive_stats_tables,descriptive_stats_fields)
###############################################################################
cat("IMPORT AND FIX FUND DATA", "\n")
###############################################################################
query_EurekahedgeHF_Excel_aca_full <- ""
query_EurekahedgeHF_Excel_aca_full <- paste(query_EurekahedgeHF_Excel_aca_full, "select       ",EurekahedgeHF_Excel_aca_full_import_vars_keep2, sep=" ")
query_EurekahedgeHF_Excel_aca_full <- paste(query_EurekahedgeHF_Excel_aca_full, "from         ",fund_table, "                                ", sep=" ")
query_EurekahedgeHF_Excel_aca_full <- trim(gsub(" {2,}", " ", query_EurekahedgeHF_Excel_aca_full))
rm2(EurekahedgeHF_Excel_aca_full_import_vars_keep2)
#EurekahedgeHF_Excel_aca_full <- runsql("SELECT * FROM EurekahedgeHF_Excel_aca_full14",descriptive_stats_db)
EurekahedgeHF_Excel_aca_full <- data.frame(runsql(query_EurekahedgeHF_Excel_aca_full,descriptive_stats_db),
total_fee=NA,
fund_ret_mkt_neg=NA,
yr_month=NA,
stringsAsFactors=FALSE)
View(EurekahedgeHF_Excel_aca_full)
View(EurekahedgeHF_Excel_aca_full)
View(EurekahedgeHF_Excel_aca_full)
